{"version":3,"file":"webrtmp.worker.js","mappings":"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","sources":["webpack://webrtmp/./utils/logger.js","webpack://webrtmp/./utils/utils.js","webpack://webrtmp/./rtmp/RTMPMessage.js","webpack://webrtmp/./rtmp/Chunk.js","webpack://webrtmp/./rtmp/UserControlMessage.js","webpack://webrtmp/./rtmp/ProtocolControlMessage.js","webpack://webrtmp/./utils/exception.js","webpack://webrtmp/./formats/media-info.js","webpack://webrtmp/./utils/utf8-conv.js","webpack://webrtmp/./flv/amf-parser.js","webpack://webrtmp/./flv/sps-parser.js","webpack://webrtmp/./flv/exp-golomb.js","webpack://webrtmp/./formats/mp4.js","webpack://webrtmp/./formats/media-segment-info.js","webpack://webrtmp/./formats/aac-silent.js","webpack://webrtmp/./utils/browser.js","webpack://webrtmp/./rtmp/AMF0Object.js","webpack://webrtmp/./wss/connection.worker.js","webpack://webrtmp/./wss/WSSConnectionManager.js","webpack://webrtmp/./rtmp/RTMPHandshake.js","webpack://webrtmp/./rtmp/RTMPMessageHandler.js","webpack://webrtmp/./rtmp/ChunkParser.js","webpack://webrtmp/./rtmp/RTMPMediaMessageHandler.js","webpack://webrtmp/./flv/transmuxer.js","webpack://webrtmp/./utils/event_emitter.js","webpack://webrtmp/./formats/mp4-remuxer.js","webpack://webrtmp/./rtmp/NetConnection.js"],"sourcesContent":["/*\n * Copyright (C) 2016 itNOX. All Rights Reserved.\n *\n * @author Michael Balen <mb@itnox.de>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nclass Log {\n    static OFF = -1;\n    static TRACE = 0;\n    static DEBUG = 1;\n    static INFO = 2;\n    static WARN = 3;\n    static ERROR = 4;\n    static CRITICAL = 5;\n    static WITH_STACKTRACE = true;\n\n    static LEVEL = Log.INFO;\n\n    /**\n     * Object with [ClassName, Loglevel]\n     * @type {}\n     */\n    static loglevels = {};\n\n    /**\n     *\n     * @param {Number} level\n     * @param {String} tag\n     * @param txt\n     * @private\n     */\n    static _output = function output(level, tag, ...txt){\n        let tmpLevel = Log.LEVEL;\n\n        if(Log.loglevels[tag]) tmpLevel = Log.loglevels[tag];\n\n        if(tmpLevel === Log.OFF) return;\n        if(tmpLevel > level) return;\n\n        const callstack = Log._getStackTrace();\n\n        // debug aufruf entfernen\n        callstack.shift();\n        callstack.shift();\n\n        let color = \"color: silver\";\n\n        switch(level) {\n            case Log.TRACE:\t// TRACE\n                color = \"background-color: gray\";\n                break;\n\n            case Log.DEBUG:\t// DEBUG\n                break;\n\n            case Log.INFO:\t// INFO\n                color = \"color: green\";\n                break;\n\n            case Log.WARN:\t// WARN\n                color = \"color: orange; background-color: #EAA80035\";\n                break;\n\n            case Log.ERROR:\t// ERROR\n                color = \"color: red; background-color: #FF000020\";\n                break;\n\n            case Log.CRITICAL:\t// CRITICAL\n                color = \"color: red\";\n                break;\n        }\n\n        Log._print(callstack, color, tag, ...txt);\n    };\n\n    /**\n     * Internal for console dump\n     * @param {String[]} callstack\n     * @param {String} color\n     * @param {String} tag\n     * @param txt\n     * @private\n     */\n    static _print(callstack, color, tag, ...txt){\n        if(Log.WITH_STACKTRACE){\n            if(Log.LEVEL === Log.ERROR){\n                console.group(\"%c[\" + tag + \"]\", color, ...txt);\n            } else {\n                console.groupCollapsed(\"%c[\" + tag + \"]\", color, ...txt);\n            }\n\n            for(let i = 0; i < callstack.length; i++) {\n                console.log(\"%c\" + callstack[i], color);\n            }\n\n            console.groupEnd();\n\n        } else {\n            console.log(\"%c[\" + tag + \"]\", color, ...txt)\n        }\n    }\n\n    /**\n     * Get Callstack\n     * @returns {String[]}\n     * @private\n     */\n    static _getStackTrace = function() {\n        let callstack = [];\n\n        try {\n            i.dont.exist+=0; //doesn't exist- that's the point\n\n        } catch(e) {\n            if (e.stack) { //Firefox\n                let lines = e.stack.split('\\n');\n\n                for (let i=0; i < lines.length; i++) {\n                    callstack.push(lines[i]);\n                }\n\n                //Ersten Eintrag entfernen\n                callstack.shift();\n                callstack.shift();\n            }\n        }\n\n        return(callstack);\n    };\n\n    /**\n     * Log Critical\n     * @param {String} tag\n     * @param msg\n     */\n    static c(tag, ...msg) {\n        Log._output(Log.CRITICAL, tag, ...msg);\n    }\n\n    /**\n     * Log Error\n     * @param {String} tag\n     * @param msg\n     */\n    static e(tag, ...msg) {\n        Log._output(Log.ERROR, tag, ...msg);\n    }\n\n    /**\n     * Log Info\n     * @param {String} tag\n     * @param msg\n     */\n    static i(tag, ...msg) {\n        Log._output(Log.INFO, tag, ...msg);\n    }\n\n    /**\n     * Log Warning\n     * @param {String} tag\n     * @param msg\n     */\n    static w(tag, ...msg) {\n        Log._output(Log.WARN, tag, ...msg);\n    }\n\n    /**\n     * Log Debug\n     * @param {String} tag\n     * @param msg\n     */\n    static d(tag, ...msg) {\n        Log._output(Log.DEBUG, tag, ...msg);\n    }\n\n    /**\n     * Log Debug\n     * @param {String} tag\n     * @param msg\n     */\n    static v(tag, ...msg) {\n        Log._output(Log.DEBUG, tag, ...msg);\n    }\n\n    /**\n     * Log Trace\n     * @param {String} tag\n     * @param msg\n     */\n    static t(tag, ...msg) {\n        Log._output(Log.TRACE, tag, ...msg);\n    }\n}\n\nexport default Log;\n","\n/*\n *\n * Copyright (C) 2023 itNOX. All Rights Reserved.\n *\n * @author Michael Balen <mb@itnox.de>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n *\n * @param {Uint8Array} bufs\n * @returns {Uint8Array}\n */\n\nexport function _concatArrayBuffers(...bufs){\n    const result = new Uint8Array(bufs.reduce((totalSize, buf)=>totalSize+buf.byteLength,0));\n    bufs.reduce((offset, buf)=>{\n        result.set(buf,offset)\n        return offset+buf.byteLength\n    },0)\n\n    return result;\n}\n\n/**\n *\n * @param {String} str\n * @returns {*[]}\n * @private\n */\nexport function _stringToByteArray(str) {\n    const bytes = [];\n\n    for(let i = 0; i < str.length; i++) {\n        const char = str.charCodeAt(i);\n        if(char > 0xFF) {\n            bytes.push(char >>> 8);\n        }\n\n        bytes.push(char & 0xFF);\n    }\n    return bytes;\n}\n\n/**\n *\n * @param {Number} num\n * @returns {*[]}\n * @private\n */\nexport function _numberToByteArray(num) {\n    const buffer = new ArrayBuffer(8);\n    new DataView(buffer).setFloat64(0, num, false);\n    return [].slice.call(new Uint8Array(buffer));\n}\n\n/**\n *\n * @param {byte[]} ba\n * @returns {number}\n * @private\n */\nexport function _byteArrayToNumber(ba){\n    let buf = new ArrayBuffer(ba.length);\n    let view = new DataView(buf);\n\n    ba.forEach(function (b, i) {\n        view.setUint8(i, b);\n    });\n\n    return view.getFloat64(0);\n}\n\n/**\n *\n * @param {byte[]} ba\n * @returns {string}\n * @private\n */\nexport function _byteArrayToString(ba){\n    let ret = \"\";\n\n    for(let i = 0; i < ba.length; i++){\n        ret += String.fromCharCode(ba[i]);\n    }\n\n    return ret;\n}\n\nexport const defaultConfig = {\n    enableStashBuffer: true,\n    stashInitialSize: undefined,\n\n    isLive: true,\n\n    autoCleanupSourceBuffer: true,\n    autoCleanupMaxBackwardDuration: 3 * 60,\n    autoCleanupMinBackwardDuration: 2 * 60,\n\n    statisticsInfoReportInterval: 600,\n\n    fixAudioTimestampGap: true,\n\n    headers: undefined\n};\n\n\nexport const TransmuxingEvents = {\n    IO_ERROR: 'io_error',\n    DEMUX_ERROR: 'demux_error',\n    INIT_SEGMENT: 'init_segment',\n    MEDIA_SEGMENT: 'media_segment',\n    LOADING_COMPLETE: 'loading_complete',\n    RECOVERED_EARLY_EOF: 'recovered_early_eof',\n    MEDIA_INFO: 'media_info',\n    METADATA_ARRIVED: 'metadata_arrived',\n    SCRIPTDATA_ARRIVED: 'scriptdata_arrived',\n    STATISTICS_INFO: 'statistics_info',\n    RECOMMEND_SEEKPOINT: 'recommend_seekpoint'\n};\n\nexport const DemuxErrors = {\n    OK: 'OK',\n    FORMAT_ERROR: 'FormatError',\n    FORMAT_UNSUPPORTED: 'FormatUnsupported',\n    CODEC_UNSUPPORTED: 'CodecUnsupported'\n};\n\nexport const MSEEvents = {\n    ERROR: 'error',\n    SOURCE_OPEN: 'source_open',\n    UPDATE_END: 'update_end',\n    BUFFER_FULL: 'buffer_full'\n};\n\nexport const PlayerEvents = {\n    ERROR: 'error',\n    LOADING_COMPLETE: 'loading_complete',\n    RECOVERED_EARLY_EOF: 'recovered_early_eof',\n    MEDIA_INFO: 'media_info',\n    METADATA_ARRIVED: 'metadata_arrived',\n    SCRIPTDATA_ARRIVED: 'scriptdata_arrived',\n    STATISTICS_INFO: 'statistics_info'\n};\n\nexport const ErrorTypes = {\n    NETWORK_ERROR: 'NetworkError',\n    MEDIA_ERROR: 'MediaError',\n    OTHER_ERROR: 'OtherError'\n};\n\nexport const LoaderErrors = {\n    OK: 'OK',\n    EXCEPTION: 'Exception',\n    HTTP_STATUS_CODE_INVALID: 'HttpStatusCodeInvalid',\n    CONNECTING_TIMEOUT: 'ConnectingTimeout',\n    EARLY_EOF: 'EarlyEof',\n    UNRECOVERABLE_EARLY_EOF: 'UnrecoverableEarlyEof'\n};\n\nexport const ErrorDetails = {\n    NETWORK_EXCEPTION: LoaderErrors.EXCEPTION,\n    NETWORK_STATUS_CODE_INVALID: LoaderErrors.HTTP_STATUS_CODE_INVALID,\n    NETWORK_TIMEOUT: LoaderErrors.CONNECTING_TIMEOUT,\n    NETWORK_UNRECOVERABLE_EARLY_EOF: LoaderErrors.UNRECOVERABLE_EARLY_EOF,\n\n    MEDIA_MSE_ERROR: 'MediaMSEError',\n\n    MEDIA_FORMAT_ERROR: DemuxErrors.FORMAT_ERROR,\n    MEDIA_FORMAT_UNSUPPORTED: DemuxErrors.FORMAT_UNSUPPORTED,\n    MEDIA_CODEC_UNSUPPORTED: DemuxErrors.CODEC_UNSUPPORTED\n};\n","/*\n *\n * Copyright (C) 2023 itNOX. All Rights Reserved.\n *\n * @author Michael Balen <mb@itnox.de>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {_concatArrayBuffers} from \"../utils/utils\";\nimport Log from \"../utils/logger\";\n\nclass RTMPMessage{\n\tTAG = \"RTMPMessage\";\n\n    static MessageTypes = [\"dummy\", \"PCMSetChunkSize\", \"PCMAbortMessage\", \"PCMAcknolegement\", \"UserControlMessage\", \"WindowAcknowledgementSize\", \"PCMSetPeerBandwidth\",\n        \"dummy\", \"AudioMessage\", \"VideoMessage\", \"dummy\", \"dummy\", \"dummy\", \"dummy\", \"dummy\", \"DataMessageAMF3\", \"Shared Object Message AMF3\", \"CommandMessageAMF3\",\n        \"DataMessageAMF0\", \"SharedObjectMessageAMF0\", \"CommandMessageAMF0\", \"dummy\", \"Aggregate Message\"];\n\n    messageType;\n\tmessageLength = 0;\n    length = 0;\n\ttimestamp = 0;\n    extendedTimestamp = false;\n\tmessage_stream_id = 0;\n\tpayload = new Uint8Array(0);\n\n    /**\n     *\n     * @param {Uint8Array} payload\n     */\n\tconstructor(payload) {\n        if(payload) {\n\t\t\tthis.setMessageLength(payload.length);\n            this.addPayload(payload);\n        }\n\t}\n\n\tclearPayload(){\n\t\tthis.payload = new Uint8Array(0);\n\t}\n\n    /**\n     *\n     * @returns {Uint8Array}\n     */\n\tgetBytes(){\n\t\tthis.header = new Uint8Array(11);\n\t\tthis.header[0] = this.messageType;\n\n\t\tthis.header[1] = (this.length >>> 16);\n\t\tthis.header[2] = (this.length >>> 8);\n\t\tthis.header[3] = (this.length);\n\n\t\tthis.header[4] = (this.timestamp >>> 24);\n\t\tthis.header[5] = (this.timestamp >>> 16);\n\t\tthis.header[6] = (this.timestamp >>> 8);\n\t\tthis.header[7] = (this.timestamp);\n\n\t\tthis.header[8] = (this.message_stream_id >>> 16);\n\t\tthis.header[9] = (this.message_stream_id >>> 8);\n\t\tthis.header[10] = (this.message_stream_id);\n\n\t\treturn _concatArrayBuffers(this.header, this.payload);\n\t}\n\n\t/**\n\t *\n\t * @param {Number} message_type\n\t */\n    setMessageType(message_type){\n        this.messageType = message_type;\n        switch(message_type){\n            case 1:\t\t// setBandwidth\n            case 2:\n            case 3:\n            case 4:     // UserControlMSG\n            case 5:\n            case 6:\n                this.message_stream_id = 0;\n                break;\n        }\n    }\n\n\tgetMessageType(){\n\t\treturn this.messageType;\n\t}\n\n    getMessageStreamID(){\n        return this.message_stream_id;\n    }\n\n\tsetMessageStreamID(messageStreamID) {\n\t\tthis.message_stream_id = messageStreamID;\n\t}\n\n\tgetPayloadlength(){\n\t\treturn this.payload.length;\n\t}\n\n    getTimestamp(){\n        return this.timestamp;\n    }\n\n\tsetMessageTimestamp(timestamp) {\n\t\tLog.v(this.TAG, \"TS: \" + timestamp);\n\t\tthis.timestamp = timestamp;\n\t}\n\n    /**\n     *\n     * @param {boolean} yes\n     */\n    setExtendedTimestamp(yes){\n\t\tLog.w(this.TAG, \"setExtendedTimestamp\");\n        this.extendedTimestamp = yes;\n    }\n\n    getExtendedTimestamp(){\n        return this.extendedTimestamp;\n    }\n\n\tsetTimestampDelta(timestamp_delta){\n\t\tLog.v(this.TAG, \"TS: \" + this.timestamp + \" Delta: \" + timestamp_delta);\n\t\tthis.timestamp += timestamp_delta;\n\t}\n\n\t/**\n\t *\n\t * @param {Uint8Array} data\n\t */\n\taddPayload(data){\n\t\tif(data.length > this.bytesMissing()) {\n\t\t\tLog.e(this.TAG, \"try to add too much data\");\n\t\t\treturn;\n\t\t}\n\n\t\tthis.payload = _concatArrayBuffers(this.payload, data);\n\t\tthis.length = this.payload.length;\n\t\tLog.d(this.TAG, \"[ RTMPMessage ] payload size is now: \" + this.length);\n\t}\n\n\tgetPayload(){\n\t\treturn this.payload;\n\t}\n\n    setMessageLength(message_length) {\n        this.messageLength = message_length;\n    }\n\n\tgetMessageLength(){\n\t\treturn this.messageLength;\n\t}\n\n\tisComplete(){\n\t\tif(this.payload.length === this.messageLength) return true;\n\t\treturn false;\n\t}\n\n\tbytesMissing(){\n\t\treturn this.messageLength - this.payload.length;\n\t}\n}\n\nexport default RTMPMessage;\n","\n/*\n *\n * Copyright (C) 2023 itNOX. All Rights Reserved.\n *\n * @author Michael Balen <mb@itnox.de>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {_concatArrayBuffers} from \"../utils/utils\";\nimport Log from \"../utils/logger\";\n\nclass Chunk{\n    TAG = \"Chunk\";\n    chunk_stream_id = 0;\n\n    length;\n\n    message_type;\n    message_stream_id = 0;\n\n    timestamp;\n    CHUNK_SIZE = 128;\n    payload;\n\n    /**\n     * @param {RTMPMessage} message\n     */\n    constructor(message) {  // RTMP Message\n        this.payload = message.getPayload();\n        this.length = this.payload.length;\n        this.message_type = message.getMessageType();\n        this.message_stream_id = message.getMessageStreamID();\n    }\n\n    /**\n     *\n     * @returns {Uint8Array}\n     */\n    getBytes(){\n        let p = new Uint8Array(this.payload);\n\n        let ret = new Uint8Array(0);\n        let fmt = 0;\n\n        do {\n            Log.d(this.TAG, \"create chunk: \" + p.length);\n            ret = _concatArrayBuffers(ret, this._getHeaderBytes(fmt), p.slice(0,this.CHUNK_SIZE));\n            p = p.slice(this.CHUNK_SIZE);\n            fmt = 0x3;\t// next chunk without header\n\n        } while(p.length > 0);\n\n        return ret;\n    }\n\n    /**\n     *\n     * @param {Number} fmt\n     * @returns {Uint8Array}\n     * @private\n     */\n    _getHeaderBytes(fmt){\n        let basic_header;\n        let header;\n\n        if(this.chunk_stream_id < 63) {\n            basic_header = new Uint8Array(1);\n            basic_header[0] = (fmt << 6) | this.chunk_stream_id;\n\n        } else if(this.chunk_stream_id < 65599) {\n            basic_header = new Uint8Array(2);\n            basic_header[0] = (fmt << 6);\n            basic_header[1] = (this.chunk_stream_id -64);\n\n        } else {\n            basic_header = new Uint8Array(3);\n            basic_header[0] = (fmt << 6) | 63;\n            basic_header[1] = ((this.chunk_stream_id -64) >>> 8);\n            basic_header[2] = ((this.chunk_stream_id -64));\n        }\n\n        switch(fmt){\n            case 0x0:\n                header = new Uint8Array(11);\n                header[0] = (this.timestamp >>> 16);\n                header[1] = (this.timestamp >>> 8);\n                header[2] = (this.timestamp);\n\n                header[3] = (this.length >>> 16);\n                header[4] = (this.length >>> 8);\n                header[5] = (this.length);\n\n                header[6] = (this.message_type);\n\n                header[7] = (this.message_stream_id >>> 24);\n                header[8] = (this.message_stream_id >>> 16);\n                header[9] = (this.message_stream_id >>> 8);\n                header[10] = (this.message_stream_id);\n                break;\n\n            case 0x1:\n                header = new Uint8Array(7);\n                header[0] = (this.timestamp >>> 16);\n                header[1] = (this.timestamp >>> 8);\n                header[2] = (this.timestamp);\n\n                header[3] = (this.length >>> 16);\n                header[4] = (this.length >>> 8);\n                header[5] = (this.length);\n\n                header[6] = (this.message_type);\n                break;\n\n\n            case 0x2:\n                header = new Uint8Array(3);\n                header[0] = (this.timestamp >>> 16);\n                header[1] = (this.timestamp >>> 8);\n                header[2] = (this.timestamp);\n                break;\n\n            case 0x3:\n                header = new Uint8Array(0);\n                break;\n        }\n\n        return _concatArrayBuffers(basic_header, header);\n    }\n\n    getPayload(){\n        return this.payload;\n    }\n\n    getMessageType(){\n        return this.message_type;\n    }\n\n    getMessageStreamID() {\n        return this.message_stream_id;\n    }\n\n    setChunkSize(size){\n        this.CHUNK_SIZE = size;\n    }\n\n    /**\n     *\n     * @param {Number} chunk_stream_id\n     */\n    setChunkStreamID(chunk_stream_id) {\n        Log.d(this.TAG, \"setChunkStreamID:\" + chunk_stream_id);\n        this.chunk_stream_id = chunk_stream_id;\n    }\n\n    /**\n     *\n     * @param {Number} message_stream_id\n     */\n    setMessageStreamID(message_stream_id) {\n        this.message_stream_id = message_stream_id;\n    }\n\n    /**\n     *\n     * @param {Number} timestamp\n     */\n    setTimestamp(timestamp){\n        this.timestamp = timestamp;\n    }\n}\n\nexport default Chunk;\n","/*\n *\n * Copyright (C) 2023 itNOX. All Rights Reserved.\n *\n * @author Michael Balen <mb@itnox.de>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nclass UserControlMessage{\n    event_type;\n    event_data1;\n    event_data2;\n\n    static events = [\"StreamBegin\", \"StreamEOF\", \"StreamDry\", \"SetBuffer\", \"StreamIsRecorded\", \"dummy\", \"PingRequest\", \"PingResponse\"];\n\n    /**\n     *\n     * @returns {Uint8Array}\n     */\n    getBytes(){\n        let ret;\n\n        if(this.event_data2) {\n            ret = new Uint8Array(10);\n            ret[0] = (this.event_type >>> 8);\n            ret[1] = (this.event_type);\n\n            ret[2] = (this.event_data1 >>> 24);\n            ret[3] = (this.event_data1 >>> 16);\n            ret[4] = (this.event_data1 >>> 8);\n            ret[5] = (this.event_data1);\n\n            ret[6] = (this.event_data2 >>> 24);\n            ret[7] = (this.event_data2 >>> 16);\n            ret[8] = (this.event_data2 >>> 8);\n            ret[9] = (this.event_data2);\n\n        } else {\n            ret = new Uint8Array(6);\n            ret[0] = (this.event_type >>> 8);\n            ret[1] = (this.event_type);\n\n            ret[2] = (this.event_data1 >>> 24);\n            ret[3] = (this.event_data1 >>> 16);\n            ret[4] = (this.event_data1 >>> 8);\n            ret[5] = (this.event_data1);\n        }\n\n        return ret;\n    }\n\n    getEventMessage(){\n        let o = {};\n\n        if(this.event_type === 3) {\n            o[UserControlMessage.events[this.event_type]] = [this.event_data1, this.event_data2];\n        } else {\n            o[UserControlMessage.events[this.event_type]] = this.event_data1;\n        }\n\n        return o;\n    }\n\n    setType(event_type){\n        this.event_type = event_type;\n    }\n\n    setEventData(event_data){\n        this.event_data1 = event_data;\n    }\n}\n\nexport default UserControlMessage;\n","/*\n *\n * Copyright (C) 2023 itNOX. All Rights Reserved.\n *\n * @author Michael Balen <mb@itnox.de>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport Log from \"../utils/logger\";\n\nclass ProtocolControlMessage{\n    TAG = \"ProtocolControlMessage\";\n    pcm_type;\n    data;\n\n    static pcm_types = [\"dummy\", \"SetChunkSize\", \"AbortMessage\", \"Acknowledgement\", \"UserControlMessage\", \"WindowAcknowledgementSize\", \"SetPeerBandwidth\"];\n\n    constructor(pcm_type, data) {\n        switch(pcm_type){\n        case 1:\n        case 2:\n        case 3:\n        case 5:\n            this.pcm_type = pcm_type;\n            this.data = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | (data[3]);\n            break;\n\n        case 6:\n            Log.w(this.TAG, \"Protocol Control Message Type: \" + pcm_type + \" use SetPeerBandwidthMessage\");\n            break;\n\n        default:\n            Log.e(this.TAG, \"Protocol Control Message Type: \" + pcm_type + \" not supported\");\n            break;\n        }\n    }\n\n    setPayload(data){\n        this.data = data;\n    }\n\n    getEventMessage(){\n        let o = {};\n        o[ProtocolControlMessage.pcm_types[this.pcm_type]] = this.data;\n        return o;\n    }\n\n    getBytes(){\n        let ret = [];\n\n        ret[0] = (this.data >>> 24);\n        ret[1] = (this.data >>> 16);\n        ret[2] = (this.data >>> 8);\n        ret[3] = (this.data);\n\n        return new Uint8Array(ret);\n    }\n}\nexport default ProtocolControlMessage;\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class RuntimeException {\n    constructor(message) {\n        this._message = message;\n    }\n\n    get name() {\n        return 'RuntimeException';\n    }\n\n    get message() {\n        return this._message;\n    }\n\n    toString() {\n        return this.name + ': ' + this.message;\n    }\n}\n\nexport class IllegalStateException extends RuntimeException {\n    constructor(message) {\n        super(message);\n    }\n\n    get name() {\n        return 'IllegalStateException';\n    }\n}\n\nexport class InvalidArgumentException extends RuntimeException {\n    constructor(message) {\n        super(message);\n    }\n\n    get name() {\n        return 'InvalidArgumentException';\n    }\n}\n\nexport class NotImplementedException extends RuntimeException {\n    constructor(message) {\n        super(message);\n    }\n\n    get name() {\n        return 'NotImplementedException';\n    }\n}\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass MediaInfo {\n\n\tconstructor() {\n\t\tthis.mimeType = null;\n\t\tthis.duration = null;\n\n\t\tthis.hasAudio = null;\n\t\tthis.hasVideo = null;\n\t\tthis.audioCodec = null;\n\t\tthis.videoCodec = null;\n\t\tthis.audioDataRate = null;\n\t\tthis.videoDataRate = null;\n\n\t\tthis.audioSampleRate = null;\n\t\tthis.audioChannelCount = null;\n\n\t\tthis.width = null;\n\t\tthis.height = null;\n\t\tthis.fps = null;\n\t\tthis.profile = null;\n\t\tthis.level = null;\n\t\tthis.refFrames = null;\n\t\tthis.chromaFormat = null;\n\t\tthis.sarNum = null;\n\t\tthis.sarDen = null;\n\n\t\tthis.metadata = null;\n\t\tthis.segments = null;  // MediaInfo[]\n\t\tthis.segmentCount = null;\n\t\tthis.hasKeyframesIndex = null;\n\t\tthis.keyframesIndex = null;\n\t}\n\n\tisComplete() {\n\t\tlet audioInfoComplete = (this.hasAudio === false) ||\n\t\t\t(this.hasAudio === true &&\n\t\t\t\tthis.audioCodec != null &&\n\t\t\t\tthis.audioSampleRate != null &&\n\t\t\t\tthis.audioChannelCount != null);\n\n\t\tlet videoInfoComplete = (this.hasVideo === false) ||\n\t\t\t(this.hasVideo === true &&\n\t\t\t\tthis.videoCodec != null &&\n\t\t\t\tthis.width != null &&\n\t\t\t\tthis.height != null &&\n\t\t\t\tthis.fps != null &&\n\t\t\t\tthis.profile != null &&\n\t\t\t\tthis.level != null &&\n\t\t\t\tthis.refFrames != null &&\n\t\t\t\tthis.chromaFormat != null &&\n\t\t\t\tthis.sarNum != null &&\n\t\t\t\tthis.sarDen != null);\n\n\t\t// keyframesIndex may not be present\n\t\treturn this.mimeType != null &&\n\t\t\tthis.duration != null &&\n\t\t\tthis.metadata != null &&\n\t\t\tthis.hasKeyframesIndex != null &&\n\t\t\taudioInfoComplete &&\n\t\t\tvideoInfoComplete;\n\t}\n\n\tisSeekable() {\n\t\treturn this.hasKeyframesIndex === true;\n\t}\n\n\tgetNearestKeyframe(milliseconds) {\n\t\tif (this.keyframesIndex == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet table = this.keyframesIndex;\n\t\tlet keyframeIdx = this._search(table.times, milliseconds);\n\n\t\treturn {\n\t\t\tindex: keyframeIdx,\n\t\t\tmilliseconds: table.times[keyframeIdx],\n\t\t\tfileposition: table.filepositions[keyframeIdx]\n\t\t};\n\t}\n\n\t_search(list, value) {\n\t\tlet idx = 0;\n\n\t\tlet last = list.length - 1;\n\t\tlet mid = 0;\n\t\tlet lbound = 0;\n\t\tlet ubound = last;\n\n\t\tif (value < list[0]) {\n\t\t\tidx = 0;\n\t\t\tlbound = ubound + 1;  // skip search\n\t\t}\n\n\t\twhile (lbound <= ubound) {\n\t\t\tmid = lbound + Math.floor((ubound - lbound) / 2);\n\t\t\tif (mid === last || (value >= list[mid] && value < list[mid + 1])) {\n\t\t\t\tidx = mid;\n\t\t\t\tbreak;\n\t\t\t} else if (list[mid] < value) {\n\t\t\t\tlbound = mid + 1;\n\t\t\t} else {\n\t\t\t\tubound = mid - 1;\n\t\t\t}\n\t\t}\n\n\t\treturn idx;\n\t}\n\n}\n\nexport default MediaInfo;\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * This file is derived from C++ project libWinTF8 (https://github.com/m13253/libWinTF8)\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function checkContinuation(uint8array, start, checkLength) {\n    let array = uint8array;\n    if (start + checkLength < array.length) {\n        while (checkLength--) {\n            if ((array[++start] & 0xC0) !== 0x80)\n                return false;\n        }\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport function decodeUTF8(uint8array) {\n    let out = [];\n    let input = uint8array;\n    let i = 0;\n    let length = uint8array.length;\n\n    while (i < length) {\n        if (input[i] < 0x80) {\n            out.push(String.fromCharCode(input[i]));\n            ++i;\n            continue;\n        } else if (input[i] < 0xC0) {\n            // fallthrough\n        } else if (input[i] < 0xE0) {\n            if (checkContinuation(input, i, 1)) {\n                let ucs4 = (input[i] & 0x1F) << 6 | (input[i + 1] & 0x3F);\n                if (ucs4 >= 0x80) {\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\n                    i += 2;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF0) {\n            if (checkContinuation(input, i, 2)) {\n                let ucs4 = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;\n                if (ucs4 >= 0x800 && (ucs4 & 0xF800) !== 0xD800) {\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\n                    i += 3;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF8) {\n            if (checkContinuation(input, i, 3)) {\n                let ucs4 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12\n                    | (input[i + 2] & 0x3F) << 6 | (input[i + 3] & 0x3F);\n                if (ucs4 > 0x10000 && ucs4 < 0x110000) {\n                    ucs4 -= 0x10000;\n                    out.push(String.fromCharCode((ucs4 >>> 10) | 0xD800));\n                    out.push(String.fromCharCode((ucs4 & 0x3FF) | 0xDC00));\n                    i += 4;\n                    continue;\n                }\n            }\n        }\n        out.push(String.fromCharCode(0xFFFD));\n        ++i;\n    }\n\n    return out.join('');\n}\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {IllegalStateException} from \"../utils/exception\";\nimport {decodeUTF8} from \"../utils/utf8-conv\";\nimport Log from \"../utils/logger\";\n\nlet le = (function () {\n    let buf = new ArrayBuffer(2);\n    (new DataView(buf)).setInt16(0, 256, true);  // little-endian write\n    return (new Int16Array(buf))[0] === 256;  // platform-spec read, if equal then LE\n})();\n\nclass AMF {\n    static TAG = \"AMF\";\n\n    /**\n     *\n     * @param {Uint8Array} array\n     * @returns {{}}\n     */\n    static parseScriptData(array) {\n        Log.d(this.TAG, array);\n\n        let data = {};\n\n        try {\n            let name = AMF.parseValue(array);\n            Log.d(this.TAG, name);\n\n            let value = AMF.parseValue(array.slice(name.size));\n            Log.d(this.TAG, value);\n\n            data[name.data] = value.data;\n\n        } catch (e) {\n            Log.w(this.TAG, e.toString());\n        }\n\n        return data;\n    }\n\n    /**\n     *\n     * @param {Uint8Array} array\n     * @returns {{data: {name: string, value: {}}, size: number, objectEnd: boolean}}\n     */\n    static parseObject(array) {\n        if (array.length < 3) {\n            throw new IllegalStateException('Data not enough when parse ScriptDataObject');\n        }\n        let name = AMF.parseString(array);\n        let value = AMF.parseValue(array.slice(name.size, array.length - name.size));\n        let isObjectEnd = value.objectEnd;\n\n        return {\n            data: {\n                name: name.data,\n                value: value.data\n            },\n            size: name.size + value.size,\n            objectEnd: isObjectEnd\n        };\n    }\n\n    /**\n     *\n     * @param {Uint8Array} array\n     * @returns {{data: {name: string, value: {}}, size: number, objectEnd: boolean}}\n     */\n    static parseVariable(array) {\n        return AMF.parseObject(array);\n    }\n\n    /**\n     *\n     * @param {Uint8Array} array\n     * @returns {{data: string, size: number}}\n     */\n    static parseString(array) {\n        if (array.length < 2) {\n            throw new IllegalStateException('Data not enough when parse String');\n        }\n        let v = new DataView(array.buffer);\n        let length = v.getUint16(0, !le);\n\n        let str;\n        if (length > 0) {\n            str = decodeUTF8(new Uint8Array(array.slice(2, 2 + length)));\n        } else {\n            str = '';\n        }\n\n        return {\n            data: str,\n            size: 2 + length\n        };\n    }\n\n    static parseLongString(array) {\n        if (array.length() < 4) {\n            throw new IllegalStateException('Data not enough when parse LongString');\n        }\n        let v = new DataView(array.buffer);\n        let length = v.getUint32(0, !le);\n\n        let str;\n        if (length > 0) {\n            str = decodeUTF8(new Uint8Array(array.slice(4, 4 +length)));\n        } else {\n            str = '';\n        }\n\n        return {\n            data: str,\n            size: 4 + length\n        };\n    }\n\n    static parseDate(array) {\n        if (array.length() < 10) {\n            throw new IllegalStateException('Data size invalid when parse Date');\n        }\n        let v = new DataView(array.buffer);\n        let timestamp = v.getFloat64(0, !le);\n        let localTimeOffset = v.getInt16(8, !le);\n        timestamp += localTimeOffset * 60 * 1000;  // get UTC time\n\n        return {\n            data: new Date(timestamp),\n            size: 8 + 2\n        };\n    }\n\n    /**\n     *\n     * @param {Uint8Array} array\n     * @returns {{data: {}, size: number, objectEnd: boolean}}\n     */\n    static parseValue(array) {\n        if (array.length < 1) {\n            throw new IllegalStateException('Data not enough when parse Value');\n        }\n\n        let v = new DataView(array.buffer);\n\n        let offset = 1;\n        let type = v.getUint8(0);\n        let value;\n        let objectEnd = false;\n\n        try {\n            switch (type) {\n                case 0:  // Number(Double) type\n                    value = v.getFloat64(1, !le);\n                    offset += 8;\n                    break;\n                case 1: {  // Boolean type\n                    let b = v.getUint8(1);\n                    value = b ? true : false;\n                    offset += 1;\n                    break;\n                }\n                case 2: {  // String type\n                    let amfstr = AMF.parseString(array.slice(1));\n                    value = amfstr.data;\n                    offset += amfstr.size;\n                    break;\n                }\n                case 3: { // Object(s) type\n                    value = {};\n                    let terminal = 0;  // workaround for malformed Objects which has missing ScriptDataObjectEnd\n                    if ((v.getUint32(array.length - 4, !le) & 0x00FFFFFF) === 9) {\n                        terminal = 3;\n                    }\n                    while (offset < array.length - 4) {  // 4 === type(UI8) + ScriptDataObjectEnd(UI24)\n                        let amfobj = AMF.parseObject(array.slice(offset, offset + array.length - terminal));\n                        if (amfobj.objectEnd)\n                            break;\n                        value[amfobj.data.name] = amfobj.data.value;\n                        offset += amfobj.size;\n                    }\n                    if (offset <= array.length - 3) {\n                        let marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;\n                        if (marker === 9) {\n                            offset += 3;\n                        }\n                    }\n                    break;\n                }\n                case 8: { // ECMA array type (Mixed array)\n                    value = {};\n                    offset += 4;  // ECMAArrayLength(UI32)\n                    let terminal = 0;  // workaround for malformed MixedArrays which has missing ScriptDataObjectEnd\n                    if ((v.getUint32(array.length - 4, !le) & 0x00FFFFFF) === 9) {\n                        terminal = 3;\n                    }\n                    while (offset < array.length - 8) {  // 8 === type(UI8) + ECMAArrayLength(UI32) + ScriptDataVariableEnd(UI24)\n                        let amfvar = AMF.parseVariable(array.slice(offset, offset + array.length - terminal));\n                        if (amfvar.objectEnd)\n                            break;\n                        value[amfvar.data.name] = amfvar.data.value;\n                        offset += amfvar.size;\n                    }\n                    if (offset <= array.length - 3) {\n                        let marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;\n                        if (marker === 9) {\n                            offset += 3;\n                        }\n                    }\n                    break;\n                }\n                case 9:  // ScriptDataObjectEnd\n                    value = undefined;\n                    offset = 1;\n                    objectEnd = true;\n                    break;\n                case 10: {  // Strict array type\n                    // ScriptDataValue[n]. NOTE: according to video_file_format_spec_v10_1.pdf\n                    value = [];\n                    let strictArrayLength = v.getUint32(1, !le);\n                    offset += 4;\n                    for (let i = 0; i < strictArrayLength; i++) {\n                        let val = AMF.parseValue(array.slice(offset, array.length));\n                        value.push(val.data);\n                        offset += val.size;\n                    }\n                    break;\n                }\n                case 11: {  // Date type\n                    let date = AMF.parseDate(array.slice(1));\n                    value = date.data;\n                    offset += date.size;\n                    break;\n                }\n                case 12: {  // Long string type\n                    let amfLongStr = AMF.parseString(array.slice(1));\n                    value = amfLongStr.data;\n                    offset += amfLongStr.size;\n                    break;\n                }\n                default:\n                    // ignore and skip\n                    offset = array.length;\n                    Log.w(this.TAG, 'Unsupported AMF value type ' + type);\n            }\n        } catch (e) {\n            Log.e(this.TAG, e.toString());\n        }\n\n        return {\n            data: value,\n            size: offset,\n            objectEnd: objectEnd\n        };\n    }\n}\n\nexport default AMF;\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nimport ExpGolomb from \"./exp-golomb\";\n\nclass SPSParser {\n    static _ebsp2rbsp(uint8array) {\n        let src = uint8array;\n        let src_length = src.byteLength;\n        let dst = new Uint8Array(src_length);\n        let dst_idx = 0;\n\n        for (let i = 0; i < src_length; i++) {\n            if (i >= 2) {\n                // Unescape: Skip 0x03 after 00 00\n                if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {\n                    continue;\n                }\n            }\n            dst[dst_idx] = src[i];\n            dst_idx++;\n        }\n\n        return new Uint8Array(dst.buffer, 0, dst_idx);\n    }\n\n    static parseSPS(uint8array) {\n        let rbsp = SPSParser._ebsp2rbsp(uint8array);\n        let gb = new ExpGolomb(rbsp);\n\n        gb.readByte();\n        let profile_idc = gb.readByte();  // profile_idc\n        gb.readByte();  // constraint_set_flags[5] + reserved_zero[3]\n        let level_idc = gb.readByte();  // level_idc\n        gb.readUEG();  // seq_parameter_set_id\n\n        let profile_string = SPSParser.getProfileString(profile_idc);\n        let level_string = SPSParser.getLevelString(level_idc);\n        let chroma_format_idc = 1;\n        let chroma_format = 420;\n        let chroma_format_table = [0, 420, 422, 444];\n        let bit_depth = 8;\n\n        if (profile_idc === 100 || profile_idc === 110 || profile_idc === 122 ||\n            profile_idc === 244 || profile_idc === 44 || profile_idc === 83 ||\n            profile_idc === 86 || profile_idc === 118 || profile_idc === 128 ||\n            profile_idc === 138 || profile_idc === 144) {\n\n            chroma_format_idc = gb.readUEG();\n            if (chroma_format_idc === 3) {\n                gb.readBits(1);  // separate_colour_plane_flag\n            }\n            if (chroma_format_idc <= 3) {\n                chroma_format = chroma_format_table[chroma_format_idc];\n            }\n\n            bit_depth = gb.readUEG() + 8;  // bit_depth_luma_minus8\n            gb.readUEG();  // bit_depth_chroma_minus8\n            gb.readBits(1);  // qpprime_y_zero_transform_bypass_flag\n            if (gb.readBool()) {  // seq_scaling_matrix_present_flag\n                let scaling_list_count = (chroma_format_idc !== 3) ? 8 : 12;\n                for (let i = 0; i < scaling_list_count; i++) {\n                    if (gb.readBool()) {  // seq_scaling_list_present_flag\n                        if (i < 6) {\n                            SPSParser._skipScalingList(gb, 16);\n                        } else {\n                            SPSParser._skipScalingList(gb, 64);\n                        }\n                    }\n                }\n            }\n        }\n        gb.readUEG();  // log2_max_frame_num_minus4\n        let pic_order_cnt_type = gb.readUEG();\n        if (pic_order_cnt_type === 0) {\n            gb.readUEG();  // log2_max_pic_order_cnt_lsb_minus_4\n        } else if (pic_order_cnt_type === 1) {\n            gb.readBits(1);  // delta_pic_order_always_zero_flag\n            gb.readSEG();  // offset_for_non_ref_pic\n            gb.readSEG();  // offset_for_top_to_bottom_field\n            let num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG();\n            for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {\n                gb.readSEG();  // offset_for_ref_frame\n            }\n        }\n        let ref_frames = gb.readUEG();  // max_num_ref_frames\n        gb.readBits(1);  // gaps_in_frame_num_value_allowed_flag\n\n        let pic_width_in_mbs_minus1 = gb.readUEG();\n        let pic_height_in_map_units_minus1 = gb.readUEG();\n\n        let frame_mbs_only_flag = gb.readBits(1);\n        if (frame_mbs_only_flag === 0) {\n            gb.readBits(1);  // mb_adaptive_frame_field_flag\n        }\n        gb.readBits(1);  // direct_8x8_inference_flag\n\n        let frame_crop_left_offset = 0;\n        let frame_crop_right_offset = 0;\n        let frame_crop_top_offset = 0;\n        let frame_crop_bottom_offset = 0;\n\n        let frame_cropping_flag = gb.readBool();\n        if (frame_cropping_flag) {\n            frame_crop_left_offset = gb.readUEG();\n            frame_crop_right_offset = gb.readUEG();\n            frame_crop_top_offset = gb.readUEG();\n            frame_crop_bottom_offset = gb.readUEG();\n        }\n\n        let sar_width = 1, sar_height = 1;\n        let fps = 0, fps_fixed = true, fps_num = 0, fps_den = 0;\n\n        let vui_parameters_present_flag = gb.readBool();\n        if (vui_parameters_present_flag) {\n            if (gb.readBool()) {  // aspect_ratio_info_present_flag\n                let aspect_ratio_idc = gb.readByte();\n                let sar_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2];\n                let sar_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33,  99, 3, 2, 1];\n\n                if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {\n                    sar_width = sar_w_table[aspect_ratio_idc - 1];\n                    sar_height = sar_h_table[aspect_ratio_idc - 1];\n                } else if (aspect_ratio_idc === 255) {\n                    sar_width = gb.readByte() << 8 | gb.readByte();\n                    sar_height = gb.readByte() << 8 | gb.readByte();\n                }\n            }\n\n            if (gb.readBool()) {  // overscan_info_present_flag\n                gb.readBool();  // overscan_appropriate_flag\n            }\n            if (gb.readBool()) {  // video_signal_type_present_flag\n                gb.readBits(4);  // video_format & video_full_range_flag\n                if (gb.readBool()) {  // colour_description_present_flag\n                    gb.readBits(24);  // colour_primaries & transfer_characteristics & matrix_coefficients\n                }\n            }\n            if (gb.readBool()) {  // chroma_loc_info_present_flag\n                gb.readUEG();  // chroma_sample_loc_type_top_field\n                gb.readUEG();  // chroma_sample_loc_type_bottom_field\n            }\n            if (gb.readBool()) {  // timing_info_present_flag\n                let num_units_in_tick = gb.readBits(32);\n                let time_scale = gb.readBits(32);\n                fps_fixed = gb.readBool();  // fixed_frame_rate_flag\n\n                fps_num = time_scale;\n                fps_den = num_units_in_tick * 2;\n                fps = fps_num / fps_den;\n            }\n        }\n\n        let sarScale = 1;\n        if (sar_width !== 1 || sar_height !== 1) {\n            sarScale = sar_width / sar_height;\n        }\n\n        let crop_unit_x = 0, crop_unit_y = 0;\n        if (chroma_format_idc === 0) {\n            crop_unit_x = 1;\n            crop_unit_y = 2 - frame_mbs_only_flag;\n        } else {\n            let sub_wc = (chroma_format_idc === 3) ? 1 : 2;\n            let sub_hc = (chroma_format_idc === 1) ? 2 : 1;\n            crop_unit_x = sub_wc;\n            crop_unit_y = sub_hc * (2 - frame_mbs_only_flag);\n        }\n\n        let codec_width = (pic_width_in_mbs_minus1 + 1) * 16;\n        let codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16);\n\n        codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x;\n        codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y;\n\n        let present_width = Math.ceil(codec_width * sarScale);\n\n        gb.destroy();\n        gb = null;\n\n        return {\n            profile_string: profile_string,  // baseline, high, high10, ...\n            level_string: level_string,  // 3, 3.1, 4, 4.1, 5, 5.1, ...\n            bit_depth: bit_depth,  // 8bit, 10bit, ...\n            ref_frames: ref_frames,\n            chroma_format: chroma_format,  // 4:2:0, 4:2:2, ...\n            chroma_format_string: SPSParser.getChromaFormatString(chroma_format),\n\n            frame_rate: {\n                fixed: fps_fixed,\n                fps: fps,\n                fps_den: fps_den,\n                fps_num: fps_num\n            },\n\n            sar_ratio: {\n                width: sar_width,\n                height: sar_height\n            },\n\n            codec_size: {\n                width: codec_width,\n                height: codec_height\n            },\n\n            present_size: {\n                width: present_width,\n                height: codec_height\n            }\n        };\n    }\n\n    static _skipScalingList(gb, count) {\n        let last_scale = 8, next_scale = 8;\n        let delta_scale = 0;\n        for (let i = 0; i < count; i++) {\n            if (next_scale !== 0) {\n                delta_scale = gb.readSEG();\n                next_scale = (last_scale + delta_scale + 256) % 256;\n            }\n            last_scale = (next_scale === 0) ? last_scale : next_scale;\n        }\n    }\n\n    static getProfileString(profile_idc) {\n        switch (profile_idc) {\n            case 66:\n                return 'Baseline';\n            case 77:\n                return 'Main';\n            case 88:\n                return 'Extended';\n            case 100:\n                return 'High';\n            case 110:\n                return 'High10';\n            case 122:\n                return 'High422';\n            case 244:\n                return 'High444';\n            default:\n                return 'Unknown';\n        }\n    }\n\n    static getLevelString(level_idc) {\n        return (level_idc / 10).toFixed(1);\n    }\n\n    static getChromaFormatString(chroma) {\n        switch (chroma) {\n            case 420:\n                return '4:2:0';\n            case 422:\n                return '4:2:2';\n            case 444:\n                return '4:4:4';\n            default:\n                return 'Unknown';\n        }\n    }\n\n}\n\nexport default SPSParser;\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Exponential-Golomb buffer decoder\nimport {IllegalStateException, InvalidArgumentException} from \"../utils/exception\";\n\nclass ExpGolomb {\n\n    constructor(uint8array) {\n        this.TAG = 'ExpGolomb';\n\n        this._buffer = uint8array;\n        this._buffer_index = 0;\n        this._total_bytes = uint8array.byteLength;\n        this._total_bits = uint8array.byteLength * 8;\n        this._current_word = 0;\n        this._current_word_bits_left = 0;\n    }\n\n    destroy() {\n        this._buffer = null;\n    }\n\n    _fillCurrentWord() {\n        let buffer_bytes_left = this._total_bytes - this._buffer_index;\n        if (buffer_bytes_left <= 0)\n            throw new IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available');\n\n        let bytes_read = Math.min(4, buffer_bytes_left);\n        let word = new Uint8Array(4);\n        word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));\n        this._current_word = new DataView(word.buffer).getUint32(0, false);\n\n        this._buffer_index += bytes_read;\n        this._current_word_bits_left = bytes_read * 8;\n    }\n\n    readBits(bits) {\n        if (bits > 32)\n            throw new InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!');\n\n        if (bits <= this._current_word_bits_left) {\n            let result = this._current_word >>> (32 - bits);\n            this._current_word <<= bits;\n            this._current_word_bits_left -= bits;\n            return result;\n        }\n\n        let result = this._current_word_bits_left ? this._current_word : 0;\n        result = result >>> (32 - this._current_word_bits_left);\n        let bits_need_left = bits - this._current_word_bits_left;\n\n        this._fillCurrentWord();\n        let bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);\n\n        let result2 = this._current_word >>> (32 - bits_read_next);\n        this._current_word <<= bits_read_next;\n        this._current_word_bits_left -= bits_read_next;\n\n        result = (result << bits_read_next) | result2;\n        return result;\n    }\n\n    readBool() {\n        return this.readBits(1) === 1;\n    }\n\n    readByte() {\n        return this.readBits(8);\n    }\n\n    _skipLeadingZero() {\n        let zero_count;\n        for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {\n            if (0 !== (this._current_word & (0x80000000 >>> zero_count))) {\n                this._current_word <<= zero_count;\n                this._current_word_bits_left -= zero_count;\n                return zero_count;\n            }\n        }\n        this._fillCurrentWord();\n        return zero_count + this._skipLeadingZero();\n    }\n\n    readUEG() {  // unsigned exponential golomb\n        let leading_zeros = this._skipLeadingZero();\n        return this.readBits(leading_zeros + 1) - 1;\n    }\n\n    readSEG() {  // signed exponential golomb\n        let value = this.readUEG();\n        if (value & 0x01) {\n            return (value + 1) >>> 1;\n        } else {\n            return -1 * (value >>> 1);\n        }\n    }\n\n}\n\nexport default ExpGolomb;\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * This file is derived from dailymotion's hls.js library (hls.js/src/remux/mp4-generator.js)\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//  MP4 boxes generator for ISO BMFF (ISO Base Media File Format, defined in ISO/IEC 14496-12)\nclass MP4 {\n    static init() {\n        MP4.types = {\n            avc1: [], avcC: [], btrt: [], dinf: [],\n            dref: [], esds: [], ftyp: [], hdlr: [],\n            mdat: [], mdhd: [], mdia: [], mfhd: [],\n            minf: [], moof: [], moov: [], mp4a: [],\n            mvex: [], mvhd: [], sdtp: [], stbl: [],\n            stco: [], stsc: [], stsd: [], stsz: [],\n            stts: [], tfdt: [], tfhd: [], traf: [],\n            trak: [], trun: [], trex: [], tkhd: [],\n            vmhd: [], smhd: [], '.mp3': []\n        };\n\n        for (let name in MP4.types) {\n            if (MP4.types.hasOwnProperty(name)) {\n                MP4.types[name] = [\n                    name.charCodeAt(0),\n                    name.charCodeAt(1),\n                    name.charCodeAt(2),\n                    name.charCodeAt(3)\n                ];\n            }\n        }\n\n        let constants = MP4.constants = {};\n\n        constants.FTYP = new Uint8Array([\n            0x69, 0x73, 0x6F, 0x6D,  // major_brand: isom\n            0x0,  0x0,  0x0,  0x1,   // minor_version: 0x01\n            0x69, 0x73, 0x6F, 0x6D,  // isom\n            0x61, 0x76, 0x63, 0x31   // avc1\n        ]);\n\n        constants.STSD_PREFIX = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x01   // entry_count\n        ]);\n\n        constants.STTS = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00   // entry_count\n        ]);\n\n        constants.STSC = constants.STCO = constants.STTS;\n\n        constants.STSZ = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // sample_size\n            0x00, 0x00, 0x00, 0x00   // sample_count\n        ]);\n\n        constants.HDLR_VIDEO = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // pre_defined\n            0x76, 0x69, 0x64, 0x65,  // handler_type: 'vide'\n            0x00, 0x00, 0x00, 0x00,  // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x56, 0x69, 0x64, 0x65,\n            0x6F, 0x48, 0x61, 0x6E,\n            0x64, 0x6C, 0x65, 0x72, 0x00  // name: VideoHandler\n        ]);\n\n        constants.HDLR_AUDIO = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // pre_defined\n            0x73, 0x6F, 0x75, 0x6E,  // handler_type: 'soun'\n            0x00, 0x00, 0x00, 0x00,  // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x53, 0x6F, 0x75, 0x6E,\n            0x64, 0x48, 0x61, 0x6E,\n            0x64, 0x6C, 0x65, 0x72, 0x00  // name: SoundHandler\n        ]);\n\n        constants.DREF = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x01,  // entry_count\n            0x00, 0x00, 0x00, 0x0C,  // entry_size\n            0x75, 0x72, 0x6C, 0x20,  // type 'url '\n            0x00, 0x00, 0x00, 0x01   // version(0) + flags\n        ]);\n\n        // Sound media header\n        constants.SMHD = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00   // balance(2) + reserved(2)\n        ]);\n\n        // video media header\n        constants.VMHD = new Uint8Array([\n            0x00, 0x00, 0x00, 0x01,  // version(0) + flags\n            0x00, 0x00,              // graphicsmode: 2 bytes\n            0x00, 0x00, 0x00, 0x00,  // opcolor: 3 * 2 bytes\n            0x00, 0x00\n        ]);\n    }\n\n    // Generate a box\n    static box(type) {\n        let size = 8;\n        let result;\n        let datas = Array.prototype.slice.call(arguments, 1);\n        let arrayCount = datas.length;\n\n        for (let i = 0; i < arrayCount; i++) {\n            size += datas[i].byteLength;\n        }\n\n        result = new Uint8Array(size);\n        result[0] = (size >>> 24) & 0xFF;  // size\n        result[1] = (size >>> 16) & 0xFF;\n        result[2] = (size >>>  8) & 0xFF;\n        result[3] = (size) & 0xFF;\n\n        result.set(type, 4);  // type\n\n        let offset = 8;\n        for (let i = 0; i < arrayCount; i++) {  // data body\n            result.set(datas[i], offset);\n            offset += datas[i].byteLength;\n        }\n\n        return result;\n    }\n\n    // emit ftyp & moov\n    static generateInitSegment(meta) {\n        let ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);\n        let moov = MP4.moov(meta);\n\n        let result = new Uint8Array(ftyp.byteLength + moov.byteLength);\n        result.set(ftyp, 0);\n        result.set(moov, ftyp.byteLength);\n        return result;\n    }\n\n    // Movie metadata box\n    static moov(meta) {\n        let mvhd = MP4.mvhd(meta.timescale, meta.duration);\n        let trak = MP4.trak(meta);\n        let mvex = MP4.mvex(meta);\n        return MP4.box(MP4.types.moov, mvhd, trak, mvex);\n    }\n\n    // Movie header box\n    static mvhd(timescale, duration) {\n        return MP4.box(MP4.types.mvhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // creation_time\n            0x00, 0x00, 0x00, 0x00,  // modification_time\n            (timescale >>> 24) & 0xFF,  // timescale: 4 bytes\n            (timescale >>> 16) & 0xFF,\n            (timescale >>>  8) & 0xFF,\n            (timescale) & 0xFF,\n            (duration >>> 24) & 0xFF,   // duration: 4 bytes\n            (duration >>> 16) & 0xFF,\n            (duration >>>  8) & 0xFF,\n            (duration) & 0xFF,\n            0x00, 0x01, 0x00, 0x00,  // Preferred rate: 1.0\n            0x01, 0x00, 0x00, 0x00,  // PreferredVolume(1.0, 2bytes) + reserved(2bytes)\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 + 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,  // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x40, 0x00, 0x00, 0x00,  // ----end composition matrix----\n            0x00, 0x00, 0x00, 0x00,  // ----begin pre_defined 6 * 4 bytes----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,  // ----end pre_defined 6 * 4 bytes----\n            0xFF, 0xFF, 0xFF, 0xFF   // next_track_ID\n        ]));\n    }\n\n    // Track box\n    static trak(meta) {\n        return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));\n    }\n\n    // Track header box\n    static tkhd(meta) {\n        let trackId = meta.id, duration = meta.duration;\n        let width = meta.presentWidth, height = meta.presentHeight;\n\n        return MP4.box(MP4.types.tkhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x07,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // creation_time\n            0x00, 0x00, 0x00, 0x00,  // modification_time\n            (trackId >>> 24) & 0xFF,  // track_ID: 4 bytes\n            (trackId >>> 16) & 0xFF,\n            (trackId >>>  8) & 0xFF,\n            (trackId) & 0xFF,\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 bytes\n            (duration >>> 24) & 0xFF, // duration: 4 bytes\n            (duration >>> 16) & 0xFF,\n            (duration >>>  8) & 0xFF,\n            (duration) & 0xFF,\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,  // layer(2bytes) + alternate_group(2bytes)\n            0x00, 0x00, 0x00, 0x00,  // volume(2bytes) + reserved(2bytes)\n            0x00, 0x01, 0x00, 0x00,  // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x40, 0x00, 0x00, 0x00,  // ----end composition matrix----\n            (width >>> 8) & 0xFF,    // width and height\n            (width) & 0xFF,\n            0x00, 0x00,\n            (height >>> 8) & 0xFF,\n            (height) & 0xFF,\n            0x00, 0x00\n        ]));\n    }\n\n    // Media Box\n    static mdia(meta) {\n        return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));\n    }\n\n    // Media header box\n    static mdhd(meta) {\n        let timescale = meta.timescale;\n        let duration = meta.duration;\n        return MP4.box(MP4.types.mdhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // creation_time\n            0x00, 0x00, 0x00, 0x00,  // modification_time\n            (timescale >>> 24) & 0xFF,  // timescale: 4 bytes\n            (timescale >>> 16) & 0xFF,\n            (timescale >>>  8) & 0xFF,\n            (timescale) & 0xFF,\n            (duration >>> 24) & 0xFF,   // duration: 4 bytes\n            (duration >>> 16) & 0xFF,\n            (duration >>>  8) & 0xFF,\n            (duration) & 0xFF,\n            0x55, 0xC4,             // language: und (undetermined)\n            0x00, 0x00              // pre_defined = 0\n        ]));\n    }\n\n    // Media handler reference box\n    static hdlr(meta) {\n        let data;\n        if (meta.type === 'audio') {\n            data = MP4.constants.HDLR_AUDIO;\n        } else {\n            data = MP4.constants.HDLR_VIDEO;\n        }\n        return MP4.box(MP4.types.hdlr, data);\n    }\n\n    // Media infomation box\n    static minf(meta) {\n        let xmhd;\n        if (meta.type === 'audio') {\n            xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);\n        } else {\n            xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);\n        }\n        return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));\n    }\n\n    // Data infomation box\n    static dinf() {\n        return MP4.box(MP4.types.dinf,\n            MP4.box(MP4.types.dref, MP4.constants.DREF)\n        );\n    }\n\n    // Sample table box\n    static stbl(meta) {\n        return MP4.box(MP4.types.stbl,  // type: stbl\n            MP4.stsd(meta),  // Sample Description Table\n            MP4.box(MP4.types.stts, MP4.constants.STTS),  // Time-To-Sample\n            MP4.box(MP4.types.stsc, MP4.constants.STSC),  // Sample-To-Chunk\n            MP4.box(MP4.types.stsz, MP4.constants.STSZ),  // Sample size\n            MP4.box(MP4.types.stco, MP4.constants.STCO)   // Chunk offset\n        );\n    }\n\n    // Sample description box\n    static stsd(meta) {\n        if (meta.type === 'audio') {\n            if (meta.codec === 'mp3') {\n                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp3(meta));\n            }\n            // else: aac -> mp4a\n            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));\n        } else {\n            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));\n        }\n    }\n\n    static mp3(meta) {\n        let channelCount = meta.channelCount;\n        let sampleRate = meta.audioSampleRate;\n\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            0x00, 0x00, 0x00, 0x01,  // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, channelCount,      // channelCount(2)\n            0x00, 0x10,              // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            (sampleRate >>> 8) & 0xFF,  // Audio sample rate\n            (sampleRate) & 0xFF,\n            0x00, 0x00\n        ]);\n\n        return MP4.box(MP4.types['.mp3'], data);\n    }\n\n    static mp4a(meta) {\n        let channelCount = meta.channelCount;\n        let sampleRate = meta.audioSampleRate;\n\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            0x00, 0x00, 0x00, 0x01,  // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, channelCount,      // channelCount(2)\n            0x00, 0x10,              // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            (sampleRate >>> 8) & 0xFF,  // Audio sample rate\n            (sampleRate) & 0xFF,\n            0x00, 0x00\n        ]);\n\n        return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));\n    }\n\n    static esds(meta) {\n        let config = meta.config || [];\n        let configSize = config.length;\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version 0 + flags\n\n            0x03,                    // descriptor_type\n            0x17 + configSize,       // length3\n            0x00, 0x01,              // es_id\n            0x00,                    // stream_priority\n\n            0x04,                    // descriptor_type\n            0x0F + configSize,       // length\n            0x40,                    // codec: mpeg4_audio\n            0x15,                    // stream_type: Audio\n            0x00, 0x00, 0x00,        // buffer_size\n            0x00, 0x00, 0x00, 0x00,  // maxBitrate\n            0x00, 0x00, 0x00, 0x00,  // avgBitrate\n\n            0x05                     // descriptor_type\n        ].concat([\n            configSize\n        ]).concat(\n            config\n        ).concat([\n            0x06, 0x01, 0x02         // GASpecificConfig\n        ]));\n        return MP4.box(MP4.types.esds, data);\n    }\n\n    static avc1(meta) {\n        let avcc = meta.avcc;\n        let width = meta.codecWidth, height = meta.codecHeight;\n\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            0x00, 0x00, 0x00, 0x01,  // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00,  // pre_defined(2) + reserved(2)\n            0x00, 0x00, 0x00, 0x00,  // pre_defined: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            (width >>> 8) & 0xFF,    // width: 2 bytes\n            (width) & 0xFF,\n            (height >>> 8) & 0xFF,   // height: 2 bytes\n            (height) & 0xFF,\n            0x00, 0x48, 0x00, 0x00,  // horizresolution: 4 bytes\n            0x00, 0x48, 0x00, 0x00,  // vertresolution: 4 bytes\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 bytes\n            0x00, 0x01,              // frame_count\n            0x0A,                    // strlen\n            0x78, 0x71, 0x71, 0x2F,  // compressorname: 32 bytes\n            0x66, 0x6C, 0x76, 0x2E,\n            0x6A, 0x73, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00,\n            0x00, 0x18,              // depth\n            0xFF, 0xFF               // pre_defined = -1\n        ]);\n        return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));\n    }\n\n    // Movie Extends box\n    static mvex(meta) {\n        return MP4.box(MP4.types.mvex, MP4.trex(meta));\n    }\n\n    // Track Extends box\n    static trex(meta) {\n        let trackId = meta.id;\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            (trackId >>> 24) & 0xFF, // track_ID\n            (trackId >>> 16) & 0xFF,\n            (trackId >>>  8) & 0xFF,\n            (trackId) & 0xFF,\n            0x00, 0x00, 0x00, 0x01,  // default_sample_description_index\n            0x00, 0x00, 0x00, 0x00,  // default_sample_duration\n            0x00, 0x00, 0x00, 0x00,  // default_sample_size\n            0x00, 0x01, 0x00, 0x01   // default_sample_flags\n        ]);\n        return MP4.box(MP4.types.trex, data);\n    }\n\n    // Movie fragment box\n    static moof(track, baseMediaDecodeTime) {\n        return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime));\n    }\n\n    static mfhd(sequenceNumber) {\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,\n            (sequenceNumber >>> 24) & 0xFF,  // sequence_number: int32\n            (sequenceNumber >>> 16) & 0xFF,\n            (sequenceNumber >>>  8) & 0xFF,\n            (sequenceNumber) & 0xFF\n        ]);\n        return MP4.box(MP4.types.mfhd, data);\n    }\n\n    // Track fragment box\n    static traf(track, baseMediaDecodeTime) {\n        let trackId = track.id;\n\n        // Track fragment header box\n        let tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) & flags\n            (trackId >>> 24) & 0xFF, // track_ID\n            (trackId >>> 16) & 0xFF,\n            (trackId >>>  8) & 0xFF,\n            (trackId) & 0xFF\n        ]));\n        // Track Fragment Decode Time\n        let tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) & flags\n            (baseMediaDecodeTime >>> 24) & 0xFF,  // baseMediaDecodeTime: int32\n            (baseMediaDecodeTime >>> 16) & 0xFF,\n            (baseMediaDecodeTime >>>  8) & 0xFF,\n            (baseMediaDecodeTime) & 0xFF\n        ]));\n        let sdtp = MP4.sdtp(track);\n        let trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);\n\n        return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);\n    }\n\n    // Sample Dependency Type box\n    static sdtp(track) {\n        let samples = track.samples || [];\n        let sampleCount = samples.length;\n        let data = new Uint8Array(4 + sampleCount);\n        // 0~4 bytes: version(0) & flags\n        for (let i = 0; i < sampleCount; i++) {\n            let flags = samples[i].flags;\n            data[i + 4] = (flags.isLeading << 6)    // is_leading: 2 (bit)\n                | (flags.dependsOn << 4)    // sample_depends_on\n                | (flags.isDependedOn << 2) // sample_is_depended_on\n                | (flags.hasRedundancy);    // sample_has_redundancy\n        }\n        return MP4.box(MP4.types.sdtp, data);\n    }\n\n    // Track fragment run box\n    static trun(track, offset) {\n        let samples = track.samples || [];\n        let sampleCount = samples.length;\n        let dataSize = 12 + 16 * sampleCount;\n        let data = new Uint8Array(dataSize);\n        offset += 8 + dataSize;\n\n        data.set([\n            0x00, 0x00, 0x0F, 0x01,      // version(0) & flags\n            (sampleCount >>> 24) & 0xFF, // sample_count\n            (sampleCount >>> 16) & 0xFF,\n            (sampleCount >>>  8) & 0xFF,\n            (sampleCount) & 0xFF,\n            (offset >>> 24) & 0xFF,      // data_offset\n            (offset >>> 16) & 0xFF,\n            (offset >>>  8) & 0xFF,\n            (offset) & 0xFF\n        ], 0);\n\n        for (let i = 0; i < sampleCount; i++) {\n            let duration = samples[i].duration;\n            let size = samples[i].size;\n            let flags = samples[i].flags;\n            let cts = samples[i].cts;\n            data.set([\n                (duration >>> 24) & 0xFF,  // sample_duration\n                (duration >>> 16) & 0xFF,\n                (duration >>>  8) & 0xFF,\n                (duration) & 0xFF,\n                (size >>> 24) & 0xFF,      // sample_size\n                (size >>> 16) & 0xFF,\n                (size >>>  8) & 0xFF,\n                (size) & 0xFF,\n                (flags.isLeading << 2) | flags.dependsOn,  // sample_flags\n                (flags.isDependedOn << 6) | (flags.hasRedundancy << 4) | flags.isNonSync,\n                0x00, 0x00,                // sample_degradation_priority\n                (cts >>> 24) & 0xFF,       // sample_composition_time_offset\n                (cts >>> 16) & 0xFF,\n                (cts >>>  8) & 0xFF,\n                (cts) & 0xFF\n            ], 12 + 16 * i);\n        }\n        return MP4.box(MP4.types.trun, data);\n    }\n\n    static mdat(data) {\n        return MP4.box(MP4.types.mdat, data);\n    }\n\n}\n\nMP4.init();\n\nexport default MP4;\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Represents an media sample (audio / video)\nexport class SampleInfo {\n\n\tconstructor(dts, pts, duration, originalDts, isSync) {\n\t\tthis.dts = dts;\n\t\tthis.pts = pts;\n\t\tthis.duration = duration;\n\t\tthis.originalDts = originalDts;\n\t\tthis.isSyncPoint = isSync;\n\t\tthis.fileposition = null;\n\t}\n\n}\n\n// Media Segment concept is defined in Media Source Extensions spec.\n// Particularly in ISO BMFF format, an Media Segment contains a moof box followed by a mdat box.\nexport class MediaSegmentInfo {\n\n\tconstructor() {\n\t\tthis.beginDts = 0;\n\t\tthis.endDts = 0;\n\t\tthis.beginPts = 0;\n\t\tthis.endPts = 0;\n\t\tthis.originalBeginDts = 0;\n\t\tthis.originalEndDts = 0;\n\t\tthis.syncPoints = [];     // SampleInfo[n], for video IDR frames only\n\t\tthis.firstSample = null;  // SampleInfo\n\t\tthis.lastSample = null;   // SampleInfo\n\t}\n\n\tappendSyncPoint(sampleInfo) {  // also called Random Access Point\n\t\tsampleInfo.isSyncPoint = true;\n\t\tthis.syncPoints.push(sampleInfo);\n\t}\n\n}\n\n// Ordered list for recording video IDR frames, sorted by originalDts\nexport class IDRSampleList {\n\n\tconstructor() {\n\t\tthis._list = [];\n\t}\n\n\tclear() {\n\t\tthis._list = [];\n\t}\n\n\tappendArray(syncPoints) {\n\t\tlet list = this._list;\n\n\t\tif (syncPoints.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (list.length > 0 && syncPoints[0].originalDts < list[list.length - 1].originalDts) {\n\t\t\tthis.clear();\n\t\t}\n\n\t\tArray.prototype.push.apply(list, syncPoints);\n\t}\n\n\tgetLastSyncPointBeforeDts(dts) {\n\t\tif (this._list.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet list = this._list;\n\t\tlet idx = 0;\n\t\tlet last = list.length - 1;\n\t\tlet mid = 0;\n\t\tlet lbound = 0;\n\t\tlet ubound = last;\n\n\t\tif (dts < list[0].dts) {\n\t\t\tidx = 0;\n\t\t\tlbound = ubound + 1;\n\t\t}\n\n\t\twhile (lbound <= ubound) {\n\t\t\tmid = lbound + Math.floor((ubound - lbound) / 2);\n\t\t\tif (mid === last || (dts >= list[mid].dts && dts < list[mid + 1].dts)) {\n\t\t\t\tidx = mid;\n\t\t\t\tbreak;\n\t\t\t} else if (list[mid].dts < dts) {\n\t\t\t\tlbound = mid + 1;\n\t\t\t} else {\n\t\t\t\tubound = mid - 1;\n\t\t\t}\n\t\t}\n\t\treturn this._list[idx];\n\t}\n\n}\n\n// Data structure for recording information of media segments in single track.\nexport class MediaSegmentInfoList {\n\n\tconstructor(type) {\n\t\tthis._type = type;\n\t\tthis._list = [];\n\t\tthis._lastAppendLocation = -1;  // cached last insert location\n\t}\n\n\tget type() {\n\t\treturn this._type;\n\t}\n\n\tget length() {\n\t\treturn this._list.length;\n\t}\n\n\tisEmpty() {\n\t\treturn this._list.length === 0;\n\t}\n\n\tclear() {\n\t\tthis._list = [];\n\t\tthis._lastAppendLocation = -1;\n\t}\n\n\t_searchNearestSegmentBefore(originalBeginDts) {\n\t\tlet list = this._list;\n\t\tif (list.length === 0) {\n\t\t\treturn -2;\n\t\t}\n\t\tlet last = list.length - 1;\n\t\tlet mid = 0;\n\t\tlet lbound = 0;\n\t\tlet ubound = last;\n\n\t\tlet idx = 0;\n\n\t\tif (originalBeginDts < list[0].originalBeginDts) {\n\t\t\tidx = -1;\n\t\t\treturn idx;\n\t\t}\n\n\t\twhile (lbound <= ubound) {\n\t\t\tmid = lbound + Math.floor((ubound - lbound) / 2);\n\t\t\tif (mid === last || (originalBeginDts > list[mid].lastSample.originalDts &&\n\t\t\t\t(originalBeginDts < list[mid + 1].originalBeginDts))) {\n\t\t\t\tidx = mid;\n\t\t\t\tbreak;\n\t\t\t} else if (list[mid].originalBeginDts < originalBeginDts) {\n\t\t\t\tlbound = mid + 1;\n\t\t\t} else {\n\t\t\t\tubound = mid - 1;\n\t\t\t}\n\t\t}\n\t\treturn idx;\n\t}\n\n\t_searchNearestSegmentAfter(originalBeginDts) {\n\t\treturn this._searchNearestSegmentBefore(originalBeginDts) + 1;\n\t}\n\n\tappend(mediaSegmentInfo) {\n\t\tlet list = this._list;\n\t\tlet msi = mediaSegmentInfo;\n\t\tlet lastAppendIdx = this._lastAppendLocation;\n\t\tlet insertIdx = 0;\n\n\t\tif (lastAppendIdx !== -1 && lastAppendIdx < list.length &&\n\t\t\tmsi.originalBeginDts >= list[lastAppendIdx].lastSample.originalDts &&\n\t\t\t((lastAppendIdx === list.length - 1) ||\n\t\t\t\t(lastAppendIdx < list.length - 1 &&\n\t\t\t\t\tmsi.originalBeginDts < list[lastAppendIdx + 1].originalBeginDts))) {\n\t\t\tinsertIdx = lastAppendIdx + 1;  // use cached location idx\n\t\t} else {\n\t\t\tif (list.length > 0) {\n\t\t\t\tinsertIdx = this._searchNearestSegmentBefore(msi.originalBeginDts) + 1;\n\t\t\t}\n\t\t}\n\n\t\tthis._lastAppendLocation = insertIdx;\n\t\tthis._list.splice(insertIdx, 0, msi);\n\t}\n\n\tgetLastSegmentBefore(originalBeginDts) {\n\t\tlet idx = this._searchNearestSegmentBefore(originalBeginDts);\n\t\tif (idx >= 0) {\n\t\t\treturn this._list[idx];\n\t\t} else {  // -1\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetLastSampleBefore(originalBeginDts) {\n\t\tlet segment = this.getLastSegmentBefore(originalBeginDts);\n\t\tif (segment != null) {\n\t\t\treturn segment.lastSample;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetLastSyncPointBefore(originalBeginDts) {\n\t\tlet segmentIdx = this._searchNearestSegmentBefore(originalBeginDts);\n\t\tlet syncPoints = this._list[segmentIdx].syncPoints;\n\t\twhile (syncPoints.length === 0 && segmentIdx > 0) {\n\t\t\tsegmentIdx--;\n\t\t\tsyncPoints = this._list[segmentIdx].syncPoints;\n\t\t}\n\t\tif (syncPoints.length > 0) {\n\t\t\treturn syncPoints[syncPoints.length - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * This file is modified from dailymotion's hls.js library (hls.js/src/helper/aac.js)\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass AAC {\n\tstatic getSilentFrame(codec, channelCount) {\n\t\tif (codec === 'mp4a.40.2') {\n\t\t\t// handle LC-AAC\n\t\t\tif (channelCount === 1) {\n\t\t\t\treturn new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n\t\t\t} else if (channelCount === 2) {\n\t\t\t\treturn new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\n\t\t\t} else if (channelCount === 3) {\n\t\t\t\treturn new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);\n\t\t\t} else if (channelCount === 4) {\n\t\t\t\treturn new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);\n\t\t\t} else if (channelCount === 5) {\n\t\t\t\treturn new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);\n\t\t\t} else if (channelCount === 6) {\n\t\t\t\treturn new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);\n\t\t\t}\n\t\t} else {\n\t\t\t// handle HE-AAC (mp4a.40.5 / mp4a.40.29)\n\t\t\tif (channelCount === 1) {\n\t\t\t\t// ffmpeg -y -f lavfi -i \"aevalsrc=0:d=0.05\" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n\t\t\t\treturn new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n\t\t\t} else if (channelCount === 2) {\n\t\t\t\t// ffmpeg -y -f lavfi -i \"aevalsrc=0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n\t\t\t\treturn new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n\t\t\t} else if (channelCount === 3) {\n\t\t\t\t// ffmpeg -y -f lavfi -i \"aevalsrc=0|0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n\t\t\t\treturn new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n}\n\nexport default AAC;\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nlet Browser = {};\n\nfunction detect() {\n\t// modified from jquery-browser-plugin\n\n\tlet ua = self.navigator.userAgent.toLowerCase();\n\n\tlet match = /(edge)\\/([\\w.]+)/.exec(ua) ||\n\t\t/(opr)[\\/]([\\w.]+)/.exec(ua) ||\n\t\t/(chrome)[ \\/]([\\w.]+)/.exec(ua) ||\n\t\t/(iemobile)[\\/]([\\w.]+)/.exec(ua) ||\n\t\t/(version)(applewebkit)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) ||\n\t\t/(webkit)[ \\/]([\\w.]+).*(version)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) ||\n\t\t/(webkit)[ \\/]([\\w.]+)/.exec(ua) ||\n\t\t/(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) ||\n\t\t/(msie) ([\\w.]+)/.exec(ua) ||\n\t\tua.indexOf('trident') >= 0 && /(rv)(?::| )([\\w.]+)/.exec(ua) ||\n\t\tua.indexOf('compatible') < 0 && /(firefox)[ \\/]([\\w.]+)/.exec(ua) ||\n\t\t[];\n\n\tlet platform_match = /(ipad)/.exec(ua) ||\n\t\t/(ipod)/.exec(ua) ||\n\t\t/(windows phone)/.exec(ua) ||\n\t\t/(iphone)/.exec(ua) ||\n\t\t/(kindle)/.exec(ua) ||\n\t\t/(android)/.exec(ua) ||\n\t\t/(windows)/.exec(ua) ||\n\t\t/(mac)/.exec(ua) ||\n\t\t/(linux)/.exec(ua) ||\n\t\t/(cros)/.exec(ua) ||\n\t\t[];\n\n\tlet matched = {\n\t\tbrowser: match[5] || match[3] || match[1] || '',\n\t\tversion: match[2] || match[4] || '0',\n\t\tmajorVersion: match[4] || match[2] || '0',\n\t\tplatform: platform_match[0] || ''\n\t};\n\n\tlet browser = {};\n\tif (matched.browser) {\n\t\tbrowser[matched.browser] = true;\n\n\t\tlet versionArray = matched.majorVersion.split('.');\n\t\tbrowser.version = {\n\t\t\tmajor: parseInt(matched.majorVersion, 10),\n\t\t\tstring: matched.version\n\t\t};\n\t\tif (versionArray.length > 1) {\n\t\t\tbrowser.version.minor = parseInt(versionArray[1], 10);\n\t\t}\n\t\tif (versionArray.length > 2) {\n\t\t\tbrowser.version.build = parseInt(versionArray[2], 10);\n\t\t}\n\t}\n\n\tif (matched.platform) {\n\t\tbrowser[matched.platform] = true;\n\t}\n\n\tif (browser.chrome || browser.opr || browser.safari) {\n\t\tbrowser.webkit = true;\n\t}\n\n\t// MSIE. IE11 has 'rv' identifer\n\tif (browser.rv || browser.iemobile) {\n\t\tif (browser.rv) {\n\t\t\tdelete browser.rv;\n\t\t}\n\t\tlet msie = 'msie';\n\t\tmatched.browser = msie;\n\t\tbrowser[msie] = true;\n\t}\n\n\t// Microsoft Edge\n\tif (browser.edge) {\n\t\tdelete browser.edge;\n\t\tlet msedge = 'msedge';\n\t\tmatched.browser = msedge;\n\t\tbrowser[msedge] = true;\n\t}\n\n\t// Opera 15+\n\tif (browser.opr) {\n\t\tlet opera = 'opera';\n\t\tmatched.browser = opera;\n\t\tbrowser[opera] = true;\n\t}\n\n\t// Stock android browsers are marked as Safari\n\tif (browser.safari && browser.android) {\n\t\tlet android = 'android';\n\t\tmatched.browser = android;\n\t\tbrowser[android] = true;\n\t}\n\n\tbrowser.name = matched.browser;\n\tbrowser.platform = matched.platform;\n\n\tfor (let key in Browser) {\n\t\tif (Browser.hasOwnProperty(key)) {\n\t\t\tdelete Browser[key];\n\t\t}\n\t}\n\tObject.assign(Browser, browser);\n}\n\ndetect();\n\nexport default Browser;\n","import {_byteArrayToNumber, _byteArrayToString, _numberToByteArray, _stringToByteArray} from \"../utils/utils\";\nimport Log from \"../utils/logger\";\n\nclass AMF0Object {\n\tTAG = \"AMF0Object\";\n\n\tdata;\n\n    params;\n\n\t/**\n\t *\n\t * @param {Object} params\n\t */\n\tconstructor(params) {\n\t\tif(params) {\n            this.params = params;\n\t\t\tLog.d(this.TAG, \"cmd: \" + this.params[0]);\n\t\t}\n\t}\n\n    /**\n     *\n     * @param {Uint8Array} data\n     * @returns {*[]}\n     */\n\tparseAMF0(data) {\n\t\tthis.data = Array.from(data);\n\t\tlet obj = [];\n\n\t\twhile (this.data.length > 0) {\n\t\t\tconst var_type = this.data.shift();\n\n\t\t\tswitch(var_type) {\n\t\t\tcase 0x00: // Number\n\t\t\t\tobj.push(_byteArrayToNumber(this.data.slice(0, 8)));\n\t\t\t\tthis.data = this.data.slice(8);\n\t\t\t\tbreak;\n\n\t\t\tcase 0x01: // boolean\n\t\t\t\tif (this.data.shift() === 0) {\n\t\t\t\t\tobj.push(false);\n\t\t\t\t} else {\n\t\t\t\t\tobj.push(true);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 0x02: // String\n\t\t\t\tlet len = (this.data[0] << 8) | (this.data[1]);\n\t\t\t\tthis.data = this.data.slice(2);\n\n\t\t\t\tobj.push(_byteArrayToString(this.data.slice(0, len)));\n\t\t\t\tthis.data = this.data.slice(len);\n\t\t\t\tbreak;\n\n\t\t\tcase 0x03: // AMF encoded object\n\t\t\t\tobj.push(this._parseAMF0Object());\n\t\t\t\tbreak;\n\n\t\t\tcase 0x05: // NUll\n                obj.push(null);\n\t\t\t\tbreak;\n\n            default:\n                Log.w(this.TAG, \"var_type: \" + var_type + \" not yet implemented\");\n                break;\n\t\t\t}\n\t\t}\n        this.params = obj;\n\t\treturn obj;\n\t}\n\n\t_parseAMF0Object() {\n\t\tlet o2 = {};\n\n\t\twhile (this.data.length > 0) {\n\t\t\tlet keylen = (this.data[0] << 8) | (this.data[1]); this.data = this.data.slice(2);\n\n\t\t\t// Object end marker\n\t\t\tif (keylen === 0 && this.data[0] === 9) {\n\t\t\t\tthis.data = this.data.slice(1);\n\t\t\t\treturn o2;\n\t\t\t}\n\n\t\t\tlet keyName = _byteArrayToString(this.data.slice(0, keylen)); this.data = this.data.slice(keylen);\n\n\t\t\tconst var_type = this.data.shift();\n\n\t\t\tswitch(var_type) {\n            case 0x00: // Number\n                o2[keyName] = _byteArrayToNumber(this.data.slice(0, 8));\n                this.data = this.data.slice(8);\n                break;\n\n            case 0x01: // boolean\n                if (this.data.shift() === 0) {\n                    o2[keyName] = false;\n                } else {\n                    o2[keyName] = true;\n                }\n\n                break;\n\n            case 0x02: // String\n                let len = (this.data[0] << 8) | (this.data[1]);\n                this.data = this.data.slice(2);\n\n                o2[keyName] = _byteArrayToString(this.data.slice(0, len));\n                this.data = this.data.slice(len);\n                break;\n\n            case 0x05:\n                o2[keyName] = null;\n                break;\n\n            default:\n\t\t\t\tLog.w(this.TAG, \"var_type: \" + var_type + \" not yet implemented\");\n                break;\n\t\t\t}\n\t\t}\n\n\t\treturn o2;\n\t}\n\n    /**\n     *\n     * @returns {Uint8Array}\n     */\n\tgetBytes() {\n\t\tlet bytes = [];\n\n        for(let i = 0; i < this.params.length; i++) {\n            const param = this.params[i];\n\n            switch(typeof param){\n            case \"string\":\n                // Command\n                bytes.push(0x02); // String\n                bytes.push(param.length >>> 8);\n                bytes.push(param.length);\n                bytes = bytes.concat(_stringToByteArray(param));\n                break;\n\n            case \"number\":\n                // TransactionID\n                bytes.push(0x00); // Number\n                bytes = bytes.concat(_numberToByteArray(param));\n                break;\n\n            case \"object\":\n                // Command Object\n                bytes.push(0x03); // Object\n\n                for (let key in param) {\n                    let value = param[key];\n                    let keylength = key.length;\n\n                    bytes.push(keylength >>> 8);\n                    bytes.push(keylength);\n                    bytes = bytes.concat(_stringToByteArray(key));\n\n                    switch(typeof value) {\n                    case \"object\":\n                        if (value == null) {\n                            bytes.push(0x05); // Null\n                        }\n\n                        break;\n\n                    case \"string\":\n                        const length = value.length;\n                        bytes.push(0x02);\n                        bytes.push(length >>> 8);\n                        bytes.push(length);\n                        bytes = bytes.concat(_stringToByteArray(value))\n                        break;\n\n                    case \"number\":\n                        bytes.push(0x00);\n                        bytes = bytes.concat(_numberToByteArray(value))\n                        break;\n\n                    case \"boolean\":\n                        bytes.push(0x01);\n                        if (value) bytes.push(0x01);\n                        else bytes.push(0x00);\n                        break;\n\n                    default:\n\t\t\t\t\t\tLog.w(this.TAG, typeof value, \" not yet implementd\");\n                        break;\n                    }\n                }\n\n                bytes.push(0x00); // End Marker\n                bytes.push(0x00);\n                bytes.push(0x09);\n                break;\n\n            case \"boolean\":\n                bytes.push(0x01);\n                if(param) bytes.push(0x01);\n                else bytes.push(0x00);\n                break;\n\n            default:\n\t\t\t\tLog.w(this.TAG, typeof param, \" not yet implementd\");\n                break;\n            }\n        }\n\n\t\treturn new Uint8Array(bytes);\n\t}\n\n    getCommand(){\n        return this.params[0];\n    }\n\n    getTransactionId(){\n        return this.params[1];\n    }\n\n    getCommandObject(){\n        return this.params[2];\n    }\n\n    getAdditionalInfo(){\n        return this.params[3];\n    }\n}\n\nexport default AMF0Object;\n","/*\n *\n * Copyright (C) 2023 itNOX. All Rights Reserved.\n *\n * @author Michael Balen <mb@itnox.de>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport WSSConnectionManager from \"./WSSConnectionManager\";\nimport RTMPHandshake from \"../rtmp/RTMPHandshake\";\nimport RTMPMessageHandler from \"../rtmp/RTMPMessageHandler\";\nimport Log from \"../utils/logger\";\n\nconst TAG = \"WebRTMP Worker\";\n\nlet port;\nlet host;\nlet message_handler;\nLog.LEVEL = Log.DEBUG;\n\nconst wss_manager = new WSSConnectionManager();\n\nself.addEventListener('message', function(e) {\n\tlet data = e.data;\n\n\tLog.d(TAG, \"CMD: \" + data.cmd);\n\n\tswitch(data.cmd) {\n\t\tcase \"open\":    // connect WebSocket\n\t\t\thost = data.host;\n\t\t\tport = data.port;\n\n\t\t\twss_manager.open(host, port, (success)=>{\n\t\t\t\tLog.v(TAG, \"open: \" + host + \":\" +port);\n\t\t\t\tif(success){\n\t\t\t\t\tLog.v(TAG, \"WSSConnected\");\n\t\t\t\t\tpostMessage([\"WSSConnected\"]);\n\n\t\t\t\t\tconst handshake = new RTMPHandshake(wss_manager.getSocket());\n\n\t\t\t\t\thandshake.onHandshakeDone = (success)=>{\n\t\t\t\t\t\tif(success){\n\t\t\t\t\t\t\tmessage_handler = new RTMPMessageHandler(wss_manager.getSocket());\n\n\t\t\t\t\t\t\tLog.d(TAG, \"connect to RTMPManager\");\n\n\t\t\t\t\t\t\twss_manager.registerMessageHandler((e)=> {\n\t\t\t\t\t\t\t\tmessage_handler.parseChunk(new Uint8Array(e.data));\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tpostMessage([\"RTMPHandshakeDone\"]);\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tLog.e(TAG, \"Handshake failed\");\n\t\t\t\t\t\t\tpostMessage([\"RTMPHandshakeFailed\"]);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\thandshake.do();\n\n\t\t\t\t} else {\n\t\t\t\t\tLog.v(this.TAG, \"WSSConnectFailed\");\n\t\t\t\t\tpostMessage([\"WSSConnectFailed\"]);\n\t\t\t\t}\n\t\t\t});\n\t\t\tbreak;\n\n\t\tcase \"connect\":             // RTMP Connect Application\n\t\t\tmessage_handler.connect(makeDefaultConnectionParams(data.appName));\n\t\t\tbreak;\n\n\t\tcase \"play\":\n\t\t\tmessage_handler.play(data.streamName);\n\t\t\tbreak;\n\n        case \"pause\":\n\t\t\tmessage_handler.pause(data.enable);\n            break;\n\n        case \"disconnect\":\n\t\t\twss_manager.close();\n\t\t\tbreak;\n\n\t\tcase \"loglevels\":\n\t\t\tLog.d(TAG, \"setting loglevels\", data.loglevels);\n\t\t\tLog.loglevels = data.loglevels;\n            break;\n\n\t\tdefault:\n\t\t\tLog.w(TAG, \"Unknown CMD: \" + data.cmd);\n\t\t\tbreak;\n\t}\n\n}, false);\n\nfunction makeDefaultConnectionParams(application){\n\treturn {\n\t\t\"app\": application,\n\t\t\"flashVer\": \"WebRTMP 0,0,1\",\n\t\t\"tcUrl\": \"rtmp://\" + host + \":1935/\" + application,\n\t\t\"fpad\": false,\n\t\t\"capabilities\": 15,\n\t\t\"audioCodecs\": 0x0400,\t// AAC\n\t\t\"videoCodecs\": 0x0080,\t// H264\n\t\t\"videoFunction\": 0\t\t// Seek false\n\t};\n}\n\npostMessage([\"Started\"]);\n\n","/*\n *\n * Copyright (C) 2023 itNOX. All Rights Reserved.\n *\n * @author Michael Balen <mb@itnox.de>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport Log from \"../utils/logger\";\n\nclass WSSConnectionManager{\n    TAG = \"WSSConnectionManager\";\n    host;\n    port;\n    wss;\n\n    /**\n     *\n     * @param {String} host\n     * @param {Number} port\n     * @param callback\n     */\n    open(host, port, callback){\n        this.host = host;\n        Log.v(this.TAG, \"connecting to: \" + host + \":\" + port);\n        this.wss = new WebSocket(\"wss://\" + host + \":\" + port + \"/\");\n\n        this.wss.binaryType = \"arraybuffer\";\n\n        this.wss.onopen = (e)=>{\n            Log.v(this.TAG, e);\n            callback(true);\n        }\n\n        this.wss.onclose = (e)=>{\n            Log.w(this.TAG, e);\n            postMessage([\"ConnectionLost\"]);\n        }\n\n        this.wss.onerror = (e)=>{\n            Log.e(this.TAG, e);\n            callback(false);\n        }\n    }\n\n    registerMessageHandler(cb){\n        this.wss.onmessage = cb;\n    }\n\n    getSocket(){\n        return this.wss;\n    }\n\n    getHost(){\n        return this.host;\n    }\n\n    /**\n     * close Websocket\n     */\n    close(){\n        this.wss.close();\n    }\n}\n\nexport default WSSConnectionManager;\n","/*\n *\n * Copyright (C) 2023 itNOX. All Rights Reserved.\n *\n * @author Michael Balen <mb@itnox.de>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport Log from \"../utils/logger\";\n\nclass RTMPHandshake{\n    TAG = \"RTMPHandshake\";\n    state = 0;\n    onHandshakeDone = null;\n    c1;\n    c2;\n\n    /**\n     *\n     * @param {WebSocket} socket\n     */\n    constructor(socket) {\n        this.socket = socket;\n\n        this.socket.onmessage = (e)=>{\n            Log.v(this.TAG, e.data);\n            this.processServerInput(new Uint8Array(e.data));\n        }\n    }\n\n    /**\n     * Do RTMP Handshake\n     */\n    do(){\n        if(!this.onHandshakeDone) {\n            Log.e(this.TAG, \"onHandshakeDone not defined\");\n            return;\n        }\n\n        Log.v(this.TAG, \"send C0\");\n        this.socket.send(new Uint8Array([0x03]));\n        this.state = 1;\n\n        Log.v(this.TAG, \"send C1\");\n        this.socket.send(this._generateC1());\n        this.state = 2;\n    }\n\n    _generateC1(){\n        const c1 = new Uint8Array(1536);\n\n        for(let i = 0; i < c1.length; i++) {\n            c1[i] = Math.floor(Math.random() * 256);\n        }\n\n        let time = Math.round(Date.now() / 1000);\n\n        c1[0] = (time >>> 24);\n        c1[1] = (time >>> 16);\n        c1[2] = (time >>> 8);\n        c1[3] = (time);\n\n        c1[4] = 0;\n        c1[5] = 0;\n        c1[6] = 0;\n        c1[7] = 0;\n\n        this.c1 = c1;\n        return c1;\n    }\n\n    _generateC2(s1){\n        this.c2 = s1;\n        return this.c2;\n    }\n\n    /**\n     *\n     * @param {Uint8Array} data\n     * @private\n     */\n    _parseS0(data){\n        Log.v(this.TAG, \"S0: \", data);\n\n        if(data[0] !== 0x03) {\n            Log.e(this.TAG, \"S0 response not 0x03\");\n\n        } else {\n            Log.v(this.TAG, \"1st Byte OK\");\n        }\n\n        this.state = 3;\n\n        if(data.length > 1) {\n            Log.v(this.TAG, \"S1 included\");\n            this._parseS1(data.slice(1));\n        }\n    }\n\n    /**\n     *\n     * @param {Uint8Array} data\n     * @private\n     */\n    _parseS1(data){\n        Log.v(this.TAG, \"parse S1: \", data);\n        this.state = 4;\n\n        let s1 = data.slice(0, 1536);\n\n        Log.v(this.TAG, \"send C2\");\n        this.socket.send(this._generateC2(s1));\n\n        this.state = 5;\n\n        if(data.length > 1536) {\n            Log.v(this.TAG, \"S2 included: \" + data.length);\n            this._parseS2(data.slice(1536));\n        }\n    }\n\n    /**\n     *\n     * @param {Uint8Array} data\n     * @private\n     */\n    _parseS2(data) {\n        Log.v(this.TAG, \"parse S2: \", data);\n\n        if(!this._compare(this.c1, data)) {\n            Log.e(this.TAG, \"C1 S1 not equal\");\n            this.onHandshakeDone(false);\n            return;\n        }\n\n        this.state = 6;\n\n        Log.v(this.TAG, \"RTMP Connection established\");\n\n        this.onHandshakeDone(true);\n    }\n\n    _compare(ar1, ar2){\n        for(let i = 0; i < ar1.length; i++){\n            if(ar1[i] !== ar2[i]) return false;\n        }\n\n        return true;\n    }\n\n\n    /**\n     *\n     * @param {Uint8Array} data\n     */\n    processServerInput(data){\n        switch(this.state){\n            case 2:\t\t//\n                this._parseS0(data);\n                break;\n\n            case 3:\n                this._parseS1(data);\n                break;\n\n            case 5:\n                this._parseS2(data);\n                break;\n        }\n    }\n}\n\nexport default RTMPHandshake;\n","/*\n *\n * Copyright (C) 2023 itNOX. All Rights Reserved.\n *\n * @author Michael Balen <mb@itnox.de>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport RTMPMessage from \"./RTMPMessage\";\nimport Chunk from \"./Chunk\";\nimport UserControlMessage from \"./UserControlMessage\";\nimport NetConnection from \"./NetConnection\";\nimport ChunkParser from \"./ChunkParser\";\nimport RTMPMediaMessageHandler from \"./RTMPMediaMessageHandler\";\nimport AMF0Object from \"./AMF0Object\";\nimport Log from \"../utils/logger\";\n\nclass RTMPMessageHandler {\n    TAG = \"RTMPMessageHandler\";\n\n    netconnections = {};\n    chunk_stream_id = 2;\n    trackedCommand = \"\";\n    socket;\n\n    /**\n     *\n     * @param {WebSocket} socket\n     */\n    constructor(socket) {\n        this.socket = socket;\n        this.chunk_parser = new ChunkParser(this);\n        this.media_handler = new RTMPMediaMessageHandler();\n\n        this.media_handler.onError = (type, info)=>{\n            Log.d(this.TAG, type, info);\n            postMessage([\"onError\", type, info]);\n        }\n\n        this.media_handler.onMediaInfo = (mediainfo)=>{\n            Log.d(this.TAG, mediainfo);\n            postMessage([\"onMediaInfo\", mediainfo]);\n        }\n\n        this.media_handler.onMetaDataArrived = (metadata)=>{\n            postMessage([\"onMetaDataArrived\", metadata]);\n        }\n\n        this.media_handler.onScriptDataArrived= (data)=>{\n            postMessage([\"onScriptDataArrived\", data]);\n        }\n\n        this.media_handler.onScriptDataArrived= (data)=>{\n            postMessage([\"onMetaDataArrived\", data]);\n        }\n\n        this.media_handler.onScriptDataArrived= (data)=>{\n            postMessage([\"onMetaDataArrived\", data]);\n        }\n    }\n\n    /**\n     *\n     * @param {Uint8Array} data\n     */\n    parseChunk(data){\n        Log.d(this.TAG, \"parseChunk: \" + data.length);\n        this.chunk_parser.parseChunk(data);\n    }\n\n    /**\n     *\n     * @param {RTMPMessage} msg\n     */\n    onMessage(msg){\n        Log.d(this.TAG, \" onMessage: \" + msg.getMessageType() + \" StreamID:\" + msg.getMessageStreamID());\n\n        switch(msg.getMessageType()){\n        case 1:         // PCM Set Chunk Size\n        case 2:         // PCM Abort Message\n        case 3:         // PCM Acknowledgement\n        case 5:         // PCM Window Acknowledgement Size\n        case 6:         // PCM Set Peer Bandwidth\n            this.netconnections[msg.getMessageStreamID()].parseMessage(msg);\n            break;\n\n        case 4:          // User Control Messages\n            this._handleUserControlMessage(msg);\n            break;\n\n        case 8:         // Audio Message\n            Log.d(this.TAG, \"AUDIOFRAME: \", msg);\n            this.media_handler.handleMediaMessage(msg);\n            break;\n\n        case 9:         // Video Message\n            Log.d(this.TAG, \"VIDEOFRAME: \", msg);\n            this.media_handler.handleMediaMessage(msg);\n            break;\n\n        case 18:        // Data Message AMF0\n            Log.d(this.TAG, \"DATAFRAME: \", msg);\n            this.media_handler.handleMediaMessage(msg);\n            break;\n\n        case 19:        // Shared Object Message AMF0\n            Log.d(this.TAG, \"SharedObjectMessage\", msg);\n            break;\n\n        case 20:        // Command Message AMF0\n            const command = new AMF0Object();\n            let cmd = command.parseAMF0(msg.getPayload());\n\n            Log.d(this.TAG, \"AMF0\", cmd);\n\n            switch(cmd[0]) {\n            case \"_result\":\n                switch(this.trackedCommand){\n                case \"connect\":\n                    Log.d(this.TAG,\"got _result: \" + cmd[3].code);\n                    if(cmd[3].code === \"NetConnection.Connect.Success\") {\n                        postMessage([cmd[3].code]);\n                        this.createStream(null);\n                    }\n                    break;\n\n                case \"createStream\":\n                    Log.d(this.TAG,\"got _result: \" + cmd[3]);\n                    if(cmd[3]) {\n                        postMessage([\"RTMPStreamCreated\"]);\n                    }\n                    break;\n\n                case \"play\":\n                    break;\n\n                case \"pause\":\n                    break;\n\n                default:\n                    Log.w(\"tracked command:\" + this.trackedCommand);\n                    break;\n                }\n\n                break;\n\n            case \"onStatus\":\n                Log.d(this.TAG,\"onStatus: \" + cmd[3].code);\n                postMessage([cmd[3].code]);\n                break;\n\n            default:\n                Log.w(this.TAG,\"CommandMessage \" + cmd[0] + \" not yet implemented\");\n                break;\n            }\n\n            break;\n\n        case 22:        // Aggregate Message\n            break;\n\n        case 15:        // Data Message AMF3\n        case 16:        // Shared Object Message AMF3\n        case 17:        // Command Message AMF3\n            Log.e(this.TAG,\"AMF3 is not yet implemented\");\n            break;\n\n        default:\n            Log.d(this.TAG,\"[MessageType: \" + RTMPMessage.MessageTypes[msg.getMessageType()] + \"(\" + msg.getMessageType() + \")\");\n            break;\n\n        }\n    }\n\n    /**\n     *\n     * @param {Object} connectionParams\n     */\n    connect(connectionParams){\n        const command = new AMF0Object([\n            \"connect\", 1, connectionParams\n        ]);\n\n        this._sendCommand(3, command);\n    }\n\n    /**\n     *\n     * @param {Object} options\n     */\n    createStream(options){\n        const command = new AMF0Object([\n            \"createStream\", 1, options\n        ]);\n\n        this._sendCommand(3, command);\n    }\n\n    /**\n     *\n     * @param {String} streamName\n     */\n    play(streamName){\n        const command = new AMF0Object([\n            \"play\", 1, null, streamName\n        ]);\n\n        this._sendCommand(3, command);\n    }\n\n    /**\n     *\n     * @param {boolean} enable\n     */\n    pause(enable){\n        const command = new AMF0Object([\n            \"pause\", 0, null, enable,0\n        ]);\n\n        this._sendCommand(3, command);\n    }\n\n    receiveVideo(enable){\n        const command = new AMF0Object([\n            \"receiveVideo\", 0, null, enable\n        ]);\n\n        this._sendCommand(3, command);\n    }\n\n    receiveAudio(enable){\n        const command = new AMF0Object([\n            \"receiveAudio\", 0, null, enable\n        ]);\n\n        this._sendCommand(3, command);\n    }\n\n    /**\n     *\n     * @param {Number} csid\n     * @param {AMF0Object} command\n     * @private\n     */\n    _sendCommand(csid, command){\n        Log.d(this.TAG, \"sendCommand:\", command);\n\n        this.trackedCommand = command.getCommand();\n\n        let msg = new RTMPMessage(command.getBytes());\n        msg.setMessageType(0x14);\t\t// AMF0 Command\n        msg.setMessageStreamID(0);\n\n        const chunk = new Chunk(msg);\n        chunk.setChunkStreamID(csid);\n\n        let buf = chunk.getBytes();\n\n        this.netconnections[0] = new NetConnection(0, this);\n\n        this.socket.send(buf);\n    }\n\n    /**\n     *\n     * @param {Number} size\n     */\n    setChunkSize(size){\n        this.chunk_parser.setChunkSize(size);\n    }\n\n    _getNextMessageStreamID(){\n        return this.netconnections.length;\n    }\n\n    _getNextChunkStreamID(){\n        return ++this.chunk_stream_id;      // increase chunk stream id\n    }\n\n    /**\n     *\n     * @param {RTMPMessage} msg\n     * @private\n     */\n    _handleUserControlMessage(msg) {\n        let data = msg.getPayload()\n\n        this.event_type = (data[0] <<8) | data[1];\n        data = data.slice(2);\n\n        switch (this.event_type){\n            case 0x00:      // StreamBegin\n            case 0x01:      // Stream EOF\n            case 0x02:      // StreamDry\n            case 0x04:      // StreamIsRecorded\n                this.event_data1 = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | (data[3]);\n                break;\n\n\n            case 0x03:      // SetBuffer\n                this.event_data1 = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | (data[3]);\n                this.event_data2 = (data[4] << 24) | (data[5] << 16) | (data[6] << 8) | (data[7]);\n                break;\n\n            case 0x06:      // PingRequest\n            case 0x07:      // PingResponse\n                this.event_data1 = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | (data[3]);\n                break;\n        }\n\n        // Handle Ping internal\n        if(this.event_type === 0x06) {  // Ping Request\n            postMessage([\"UserControlMessage\", [\"ping\", this.event_data1]]);\n\n            const msg = new UserControlMessage();\n            msg.setType(0x07);          // Ping Response\n            msg.setEventData(this.event_data1);\n\n\n            let m2 = new RTMPMessage(msg.getBytes());\n            m2.setMessageType(0x04)     // UserControlMessage\n\n            const chunk = new Chunk(m2);\n            chunk.setChunkStreamID(2);  // Control Channel\n\n            Log.i(this.TAG,\"send Pong\");\n            this.socket.send(chunk.getBytes());\n        }\n    }\n}\n\nexport default RTMPMessageHandler;\n\n","/*\n *\n * Copyright (C) 2023 itNOX. All Rights Reserved.\n *\n * @author Michael Balen <mb@itnox.de>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport RTMPMessage from \"./RTMPMessage\";\nimport {_concatArrayBuffers} from \"../utils/utils\";\nimport Log from \"../utils/logger\";\n\nclass ChunkParser {\n    TAG = \"ChunkParser\";\n\n    /**\n     *\n     * @type {number}\n     */\n\tstatic CHUNK_SIZE = 128;\n    chunkstreams = [];\n\n    /**\n     * @type {Uint8Array}\n     */\n    buffer = new Uint8Array(0);\n\n    /**\n     *\n     * @param {RTMPMessageHandler} conn_worker\n     */\n\tconstructor(conn_worker) {\n        this.conn_worker = conn_worker;\n    }\n\n    /**\n     * @param {Uint8Array} newdata\n     */\n    parseChunk(newdata){\n        let msg;\n        let timestamp;\n        let fmt;\n\n        this.buffer = _concatArrayBuffers(this.buffer, newdata);      // Neues Packet an Buffer anfügen\n\n        do {\n            Log.d(this.TAG, \"buffer length: \" + this.buffer.length);\n\n            if(this.buffer.length < 100) Log.d(this.TAG, this.buffer);\n\n            /**\n             *\n             * @type {Uint8Array}\n             */\n            let data = this.buffer;\n            let header_length = 0;\n            let message_length = 0;\n            let payload_length = 0;\n\n            // Message Header Type\n            fmt = ((data[0] & 0xC0) >>> 6);  // upper 2 bit\n\n            // Basic Header ChunkID\n            let csid = data[header_length++] & 0x3f;\t// lower 6 bits\n\n            if(csid === 0) {\t\t\t\t\t// csid is 14bit\n                csid = data[header_length++] + 64;\n\n            } else if (csid === 1) {\t\t\t// csid is 22bit\n                csid = data[header_length++] * 256 + data[header_length++] + 64;\n            }\n\n            Log.d(this.TAG, \"chunk type: \", fmt, \" StreamID: \" + csid);\n\n            let payload;\n\n            // Message\n            switch(fmt) {\n                case 0:\t\t// 11 byte\n                timestamp = (data[header_length++] << 16) | (data[header_length++] << 8) | (data[header_length++]);\t// 3 byte timestamp\n                message_length = (data[header_length++] << 16) | (data[header_length++] << 8) | (data[header_length++]);\t// 3 byte Message length\n\n                msg = new RTMPMessage();\n                msg.setMessageType(data[header_length++]);                // 1 byte msg type\n                msg.setMessageStreamID((data[header_length++] << 24) | (data[header_length++] << 16) | (data[header_length++] << 8) | (data[header_length++]));\t// 4 byte Message stream id\n                msg.setMessageLength(message_length);\n\n                if (timestamp === 0xFFFFFF) {\t// extended Timestamp\n                    timestamp = (data[header_length++] << 24) | (data[header_length++] << 16) | (data[header_length++] << 8) | (data[header_length++]);\n                    msg.setExtendedTimestamp(true);\n                }\n\n                msg.setMessageTimestamp(timestamp);\n\n                Log.d(this.TAG, \"message_length: \" + message_length);\n\n                this.chunkstreams[csid] = msg;\n                break;\n\n            case 1:\t\t// 7 byte\n                timestamp = (data[header_length++] << 16) | (data[header_length++] << 8) | (data[header_length++]);\t// 3 byte timestamp\n                message_length = (data[header_length++] << 16) | (data[header_length++] << 8) | (data[header_length++]);\t// 3 byte Message length\n\n                msg = this.chunkstreams[csid];\n                msg.setMessageType(data[header_length++]);\n                msg.setMessageLength(message_length);\n\n                if (timestamp === 0xFFFFFF) {\t// extended Timestamp\n                    timestamp = (data[header_length++] << 24) | (data[header_length++] << 16) | (data[header_length++] << 8) | (data[header_length++]);\n                    msg.setExtendedTimestamp(true);\n                } else {\n                    msg.setExtendedTimestamp(false);\n                }\n\n                msg.setTimestampDelta(timestamp);\n\n                Log.d(this.TAG, \"message_length: \" + message_length);\n\n                this.chunkstreams[csid] = msg;\n                break;\n\n            case 2:\t\t// 3 byte\n                timestamp = (data[header_length++] << 16) | (data[header_length++] << 8) | (data[header_length++]);\t// 3 byte timestamp delta\n\n                msg = this.chunkstreams[csid];\n\n                if (timestamp === 0xFFFFFF) {\t// extended Timestamp\n                    timestamp = (data[header_length++] << 24) | (data[header_length++] << 16) | (data[header_length++] << 8) | (data[header_length++]);\n                    msg.setExtendedTimestamp(true);\n\n                } else {\n                    msg.setExtendedTimestamp(false);\n                }\n\n                msg.setTimestampDelta(timestamp);\n\n                break;\n\n            case 3:\t\t// 0 byte\n                msg = this.chunkstreams[csid];\n\n                // extended timestamp is present when setted in the chunk stream\n                if(msg.getExtendedTimestamp()) {\n                    timestamp = (data[header_length++] << 24) | (data[header_length++] << 16) | (data[header_length++] << 8) | (data[header_length++]);\n                    msg.setTimestampDelta(timestamp);\n                }\n\n                break;\n            }\n\n            if(!msg) {\n                Log.e(this.TAG, \"No suitable RTMPMessage found\");\n            }\n\n\n\n            payload_length = this.chunkstreams[csid].bytesMissing();\n\n            if(payload_length > this.CHUNK_SIZE) payload_length = this.CHUNK_SIZE;      // Max. CHUNK_SIZE erwarten\n\n            payload = data.slice(header_length, header_length +payload_length);\n\n            // sind genug bytes für das chunk da?\n            if(payload.length < payload_length){\n                Log.d(this.TAG, \"packet(\" + payload.length + \"/\" + payload_length + \") too small, wait for next\");\n                return;\n            }\n\n            this.chunkstreams[csid].addPayload(payload);\n\n            if(this.chunkstreams[csid].isComplete()) {     // Message complete\n                Log.d(this.TAG, \"RTMP: \", msg.getMessageType(), RTMPMessage.MessageTypes[msg.getMessageType()], msg.getPayloadlength(), msg.getMessageStreamID());\n                this.conn_worker.onMessage(this.chunkstreams[csid]);\n                this.chunkstreams[csid].clearPayload();\n            }\n\n            let consumed = (header_length + payload_length);\n\n            if(consumed > this.buffer.length) {\n                Log.w(this.TAG, \"mehr abschneiden als da\");\n            }\n\n            this.buffer = this.buffer.slice(consumed);\n            Log.d(this.TAG, \"consumed: \" + consumed + \" bytes, rest: \" + this.buffer.length);\n\n        } while(this.buffer.length > 11);   // minimum size\n\n        Log.d(this.TAG, \"parseChunk complete\");\n    }\n\n\n\n    /**\n     *\n     * @param {Number} size\n     */\n    setChunkSize(size){\n        Log.d(this.TAG, \"SetChunkSize: \" + size);\n        this.CHUNK_SIZE = size;\n    }\n}\n\nexport default ChunkParser;\n","/*\n *\n * Copyright (C) 2023 itNOX. All Rights Reserved.\n *\n * This was heavily inspired by bilibi FLVPlayer (flv.js/src/demux/flv-demuxer.js)\n * @author Michael Balen <mb@itnox.de>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {IllegalStateException} from \"../utils/exception\";\nimport MediaInfo from \"../formats/media-info\";\nimport AMF from \"../flv/amf-parser\";\nimport Log from \"../utils/logger\";\nimport {defaultConfig, DemuxErrors, TransmuxingEvents} from \"../utils/utils\";\nimport SPSParser from \"../flv/sps-parser\";\nimport Transmuxer from \"../flv/transmuxer\";\n\nclass RTMPMediaMessageHandler{\n    TAG = \"RTMPMediaMessageHandler\";\n\n    constructor(config) {\n        this._config = config;\n\n        this._onError = null;\n        this._onMediaInfo = null;\n        this._onMetaDataArrived = null;\n        this._onScriptDataArrived = null;\n        this._onDataAvailable = null;\n        this._onTrackMetadata = null;\n\n        this._dispatch = false;\n\n        this._hasAudio = true;\n        this._hasVideo = true;\n\n        this._hasAudioFlagOverrided = false;\n        this._hasVideoFlagOverrided = false;\n\n        this._audioInitialMetadataDispatched = false;\n        this._videoInitialMetadataDispatched = false;\n\n        this._mediaInfo = new MediaInfo();\n        this._mediaInfo.hasAudio = this._hasAudio;\n        this._mediaInfo.hasVideo = this._hasVideo;\n        this._metadata = null;\n        this._audioMetadata = null;\n        this._videoMetadata = null;\n\n        this._naluLengthSize = 4;\n        this._timestampBase = 0;  // int32, in milliseconds\n        this._timescale = 1000;\n        this._duration = 0;  // int32, in milliseconds\n        this._durationOverrided = false;\n        this._referenceFrameRate = {\n            fixed: true,\n            fps: 23.976,\n            fps_num: 23976,\n            fps_den: 1000\n        };\n\n        this._flvSoundRateTable = [5500, 11025, 22050, 44100, 48000];\n\n        this._mpegSamplingRates = [\n            96000, 88200, 64000, 48000, 44100, 32000,\n            24000, 22050, 16000, 12000, 11025, 8000, 7350\n        ];\n\n        this._mpegAudioV10SampleRateTable = [44100, 48000, 32000, 0];\n        this._mpegAudioV20SampleRateTable = [22050, 24000, 16000, 0];\n        this._mpegAudioV25SampleRateTable = [11025, 12000, 8000,  0];\n\n        this._mpegAudioL1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1];\n        this._mpegAudioL2BitRateTable = [0, 32, 48, 56,  64,  80,  96, 112, 128, 160, 192, 224, 256, 320, 384, -1];\n        this._mpegAudioL3BitRateTable = [0, 32, 40, 48,  56,  64,  80,  96, 112, 128, 160, 192, 224, 256, 320, -1];\n\n        this._videoTrack = {type: 'video', id: 1, sequenceNumber: 0, samples: [], length: 0};\n        this._audioTrack = {type: 'audio', id: 2, sequenceNumber: 0, samples: [], length: 0};\n\n        this._littleEndian = (function () {\n            let buf = new ArrayBuffer(2);\n            (new DataView(buf)).setInt16(0, 256, true);  // little-endian write\n            return (new Int16Array(buf))[0] === 256;  // platform-spec read, if equal then LE\n        })();\n\n\n        this.bytePos = 0;\n\n        this._config = defaultConfig;\n        this._transmuxer = new Transmuxer(this._config);\n\n        this._transmuxer.on(TransmuxingEvents.INIT_SEGMENT, (type, is) => {\n            postMessage([TransmuxingEvents.INIT_SEGMENT, type, is]);\n        });\n\n        this._transmuxer.on(TransmuxingEvents.MEDIA_SEGMENT, (type, ms) => {\n            postMessage([TransmuxingEvents.MEDIA_SEGMENT, type, ms]);\n        });\n\n        this._transmuxer.on(TransmuxingEvents.MEDIA_INFO, (mediaInfo) => {\n            this._mediaInfo = mediaInfo;\n            postMessage([TransmuxingEvents.MEDIA_INFO, mediaInfo]);\n        });\n\n        this._transmuxer.on(TransmuxingEvents.METADATA_ARRIVED, (metadata) => {\n            postMessage([TransmuxingEvents.METADATA_ARRIVED, metadata]);\n        });\n\n        this._transmuxer.on(TransmuxingEvents.SCRIPTDATA_ARRIVED, (data) => {\n            postMessage([TransmuxingEvents.SCRIPTDATA_ARRIVED, data]);\n        });\n\n        this._onDataAvailable = (audioTrack, videoTrack) =>{\n            Log.d(this.TAG, \"_onDataAvailable\");\n            this._transmuxer.remux(audioTrack, videoTrack);\n        }\n\n        this._onTrackMetadata = (type, metadata)=>{\n            Log.d(this.TAG, \"_onTrackMetadata\");\n            this._transmuxer._onTrackMetadataReceived(type, metadata);\n        }\n    }\n\n    destroy() {\n        this._mediaInfo = null;\n        this._metadata = null;\n        this._audioMetadata = null;\n        this._videoMetadata = null;\n        this._videoTrack = null;\n        this._audioTrack = null;\n\n        this._onError = null;\n        this._onMediaInfo = null;\n        this._onMetaDataArrived = null;\n        this._onScriptDataArrived = null;\n        this._onTrackMetadata = null;\n        this._onDataAvailable = null;\n    }\n\n    // prototype: function(type: string, metadata: any): void\n    get onTrackMetadata() {\n        return this._onTrackMetadata;\n    }\n\n    set onTrackMetadata(callback) {\n        this._onTrackMetadata = callback;\n    }\n\n    // prototype: function(mediaInfo: MediaInfo): void\n    get onMediaInfo() {\n        return this._onMediaInfo;\n    }\n\n    set onMediaInfo(callback) {\n        this._onMediaInfo = callback;\n    }\n\n    get onMetaDataArrived() {\n        return this._onMetaDataArrived;\n    }\n\n    set onMetaDataArrived(callback) {\n        this._onMetaDataArrived = callback;\n    }\n\n    get onScriptDataArrived() {\n        return this._onScriptDataArrived;\n    }\n\n    set onScriptDataArrived(callback) {\n        this._onScriptDataArrived = callback;\n    }\n\n    // prototype: function(type: number, info: string): void\n    get onError() {\n        return this._onError;\n    }\n\n    set onError(callback) {\n        this._onError = callback;\n    }\n\n    // prototype: function(videoTrack: any, audioTrack: any): void\n    get onDataAvailable() {\n        return this._onDataAvailable;\n    }\n\n    set onDataAvailable(callback) {\n        this._onDataAvailable = callback;\n    }\n\n    // timestamp base for output samples, must be in milliseconds\n    get timestampBase() {\n        return this._timestampBase;\n    }\n\n    set timestampBase(base) {\n        this._timestampBase = base;\n    }\n\n    get overridedDuration() {\n        return this._duration;\n    }\n\n    // Force-override media duration. Must be in milliseconds, int32\n    set overridedDuration(duration) {\n        this._durationOverrided = true;\n        this._duration = duration;\n        this._mediaInfo.duration = duration;\n    }\n\n    // Force-override audio track present flag, boolean\n    set overridedHasAudio(hasAudio) {\n        this._hasAudioFlagOverrided = true;\n        this._hasAudio = hasAudio;\n        this._mediaInfo.hasAudio = hasAudio;\n    }\n\n    // Force-override video track present flag, boolean\n    set overridedHasVideo(hasVideo) {\n        this._hasVideoFlagOverrided = true;\n        this._hasVideo = hasVideo;\n        this._mediaInfo.hasVideo = hasVideo;\n    }\n\n    resetMediaInfo() {\n        this._mediaInfo = new MediaInfo();\n    }\n\n    _isInitialMetadataDispatched() {\n        if (this._hasAudio && this._hasVideo) {  // both audio & video\n            return this._audioInitialMetadataDispatched && this._videoInitialMetadataDispatched;\n        }\n        if (this._hasAudio && !this._hasVideo) {  // audio only\n            return this._audioInitialMetadataDispatched;\n        }\n        if (!this._hasAudio && this._hasVideo) {  // video only\n            return this._videoInitialMetadataDispatched;\n        }\n        return false;\n    }\n\n    /**\n     *\n     * @param {RTMPMessage} msg\n     */\n    handleMediaMessage(msg) {\n        Log.d(this.TAG, \"handleMediaMessage\", msg.getMessageType());\n        if (!this._onError || !this._onMediaInfo || !this._onTrackMetadata || !this._onDataAvailable) {\n            throw new IllegalStateException('Flv: onError & onMediaInfo & onTrackMetadata & onDataAvailable callback must be specified');\n        }\n\n        this._dispatch = true;\n\n        let tagType = msg.getMessageType();\n        let timestamp = msg.getTimestamp();\n        let streamId = msg.getMessageStreamID()\n        if (streamId !== 0) {\n            Log.w(this.TAG, 'Meet tag which has StreamID != 0!');\n        }\n\n        Log.d(this.TAG, msg);\n\n        switch (tagType) {\n            case 8:  // Audio\n                this._parseAudioData(msg.getPayload(), timestamp);\n                break;\n            case 9:  // Video\n                this._parseVideoData(msg.getPayload(), timestamp, this.bytePos);\n                break;\n            case 18:  // ScriptDataObject\n                this._parseScriptData(msg.getPayload());\n                break;\n        }\n\n        this.bytePos += msg.getMessageLength() + 11 +1;\n\n        // dispatch parsed frames to consumer (typically, the remuxer)\n        if (this._isInitialMetadataDispatched()) {\n            if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                Log.i(this.TAG, \"sedn2\");\n                this._onDataAvailable(this._audioTrack, this._videoTrack);\n            }\n        }\n\n        return;\n    }\n\n    /**\n     *\n     * @param {Uint8Array} payload\n     * @private\n     */\n    _parseScriptData(payload) {\n        let scriptData = AMF.parseScriptData(payload);\n\n        if (scriptData.hasOwnProperty('onMetaData')) {\n            if (scriptData.onMetaData == null || typeof scriptData.onMetaData !== 'object') {\n                Log.w(this.TAG, 'Invalid onMetaData structure!');\n                return;\n            }\n            if (this._metadata) {\n                Log.w(this.TAG, 'Found another onMetaData tag!');\n            }\n            this._metadata = scriptData;\n            let onMetaData = this._metadata.onMetaData;\n\n            if (this._onMetaDataArrived) {\n                this._onMetaDataArrived(Object.assign({}, onMetaData));\n            }\n\n            if (typeof onMetaData.hasAudio === 'boolean') {  // hasAudio\n                if (this._hasAudioFlagOverrided === false) {\n                    this._hasAudio = onMetaData.hasAudio;\n                    this._mediaInfo.hasAudio = this._hasAudio;\n                }\n            }\n            if (typeof onMetaData.hasVideo === 'boolean') {  // hasVideo\n                if (this._hasVideoFlagOverrided === false) {\n                    this._hasVideo = onMetaData.hasVideo;\n                    this._mediaInfo.hasVideo = this._hasVideo;\n                }\n            }\n            if (typeof onMetaData.audiodatarate === 'number') {  // audiodatarate\n                this._mediaInfo.audioDataRate = onMetaData.audiodatarate;\n            }\n            if (typeof onMetaData.videodatarate === 'number') {  // videodatarate\n                this._mediaInfo.videoDataRate = onMetaData.videodatarate;\n            }\n            if (typeof onMetaData.width === 'number') {  // width\n                this._mediaInfo.width = onMetaData.width;\n            }\n            if (typeof onMetaData.height === 'number') {  // height\n                this._mediaInfo.height = onMetaData.height;\n            }\n            if (typeof onMetaData.duration === 'number') {  // duration\n                if (!this._durationOverrided) {\n                    let duration = Math.floor(onMetaData.duration * this._timescale);\n                    this._duration = duration;\n                    this._mediaInfo.duration = duration;\n                }\n            } else {\n                this._mediaInfo.duration = 0;\n            }\n            if (typeof onMetaData.framerate === 'number') {  // framerate\n                let fps_num = Math.floor(onMetaData.framerate * 1000);\n                if (fps_num > 0) {\n                    let fps = fps_num / 1000;\n                    this._referenceFrameRate.fixed = true;\n                    this._referenceFrameRate.fps = fps;\n                    this._referenceFrameRate.fps_num = fps_num;\n                    this._referenceFrameRate.fps_den = 1000;\n                    this._mediaInfo.fps = fps;\n                }\n            }\n            if (typeof onMetaData.keyframes === 'object') {  // keyframes\n                this._mediaInfo.hasKeyframesIndex = true;\n                let keyframes = onMetaData.keyframes;\n                this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(keyframes);\n                onMetaData.keyframes = null;  // keyframes has been extracted, remove it\n            } else {\n                this._mediaInfo.hasKeyframesIndex = false;\n            }\n            this._dispatch = false;\n            this._mediaInfo.metadata = onMetaData;\n            Log.v(this.TAG, 'Parsed onMetaData');\n            if (this._mediaInfo.isComplete()) {\n                this._onMediaInfo(this._mediaInfo);\n            }\n        }\n\n        if (Object.keys(scriptData).length > 0) {\n            if (this._onScriptDataArrived) {\n                this._onScriptDataArrived(Object.assign({}, scriptData));\n            }\n        }\n    }\n\n    _parseKeyframesIndex(keyframes) {\n        let times = [];\n        let filepositions = [];\n\n        // ignore first keyframe which is actually AVC Sequence Header (AVCDecoderConfigurationRecord)\n        for (let i = 1; i < keyframes.times.length; i++) {\n            let time = this._timestampBase + Math.floor(keyframes.times[i] * 1000);\n            times.push(time);\n            filepositions.push(keyframes.filepositions[i]);\n        }\n\n        return {\n            times: times,\n            filepositions: filepositions\n        };\n    }\n\n    /**\n     *\n     * @param {Uint8Array} payload\n     * @param tagTimestamp\n     * @private\n     */\n    _parseAudioData(payload, tagTimestamp) {\n        Log.d(this.TAG, \"_parseAudioData\", tagTimestamp);\n        if (payload.length <= 1) {\n            Log.w(this.TAG, 'Flv: Invalid audio packet, missing SoundData payload!');\n            return;\n        }\n\n        if (this._hasAudioFlagOverrided === true && this._hasAudio === false) {\n            // If hasAudio: false indicated explicitly in MediaDataSource,\n            // Ignore all the audio packets\n            return;\n        }\n\n        let le = this._littleEndian;\n        let v = new DataView(payload.buffer);\n\n        let soundSpec = v.getUint8(0);\n\n        let soundFormat = soundSpec >>> 4;\n        if (soundFormat !== 2 && soundFormat !== 10) {  // MP3 or AAC\n            this._onError(DemuxErrors.CODEC_UNSUPPORTED, 'Flv: Unsupported audio codec idx: ' + soundFormat);\n            return;\n        }\n\n        let soundRate = 0;\n        let soundRateIndex = (soundSpec & 12) >>> 2;\n        if (soundRateIndex >= 0 && soundRateIndex <= 4) {\n            soundRate = this._flvSoundRateTable[soundRateIndex];\n        } else {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid audio sample rate idx: ' + soundRateIndex);\n            return;\n        }\n\n        let soundSize = (soundSpec & 2) >>> 1;  // unused\n        let soundType = (soundSpec & 1);\n\n\n        let meta = this._audioMetadata;\n        let track = this._audioTrack;\n\n        if (!meta) {\n            if (this._hasAudio === false && this._hasAudioFlagOverrided === false) {\n                this._hasAudio = true;\n                this._mediaInfo.hasAudio = true;\n            }\n\n            // initial metadata\n            meta = this._audioMetadata = {};\n            meta.type = 'audio';\n            meta.id = track.id;\n            meta.timescale = this._timescale;\n            meta.duration = this._duration;\n            meta.audioSampleRate = soundRate;\n            meta.channelCount = (soundType === 0 ? 1 : 2);\n        }\n\n        if (soundFormat === 10) {  // AAC\n            let aacData = this._parseAACAudioData(payload.slice(1));\n            if (aacData == undefined) {\n                return;\n            }\n\n            if (aacData.packetType === 0) {  // AAC sequence header (AudioSpecificConfig)\n                if (meta.config) {\n                    Log.w(this.TAG, 'Found another AudioSpecificConfig!');\n                }\n                let misc = aacData.data;\n                meta.audioSampleRate = misc.samplingRate;\n                meta.channelCount = misc.channelCount;\n                meta.codec = misc.codec;\n                meta.originalCodec = misc.originalCodec;\n                meta.config = misc.config;\n                // The decode result of an aac sample is 1024 PCM samples\n                meta.refSampleDuration = 1024 / meta.audioSampleRate * meta.timescale;\n                Log.v(this.TAG, 'Parsed AudioSpecificConfig');\n\n                if (this._isInitialMetadataDispatched()) {\n                    // Non-initial metadata, force dispatch (or flush) parsed frames to remuxer\n                    if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                        this._onDataAvailable(this._audioTrack, this._videoTrack);\n                    }\n                } else {\n                    this._audioInitialMetadataDispatched = true;\n                }\n                // then notify new metadata\n                this._dispatch = false;\n                Log.i(this.TAG, \"ON!\");\n                this._onTrackMetadata('audio', meta);\n\n                let mi = this._mediaInfo;\n                mi.audioCodec = meta.originalCodec;\n                mi.audioSampleRate = meta.audioSampleRate;\n                mi.audioChannelCount = meta.channelCount;\n                if (mi.hasVideo) {\n                    if (mi.videoCodec != null) {\n                        mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                    }\n                } else {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.audioCodec + '\"';\n                }\n                if (mi.isComplete()) {\n                    this._onMediaInfo(mi);\n                }\n            } else if (aacData.packetType === 1) {  // AAC raw frame data\n                let dts = this._timestampBase + tagTimestamp;\n                let aacSample = {unit: aacData.data, length: aacData.data.byteLength, dts: dts, pts: dts};\n                track.samples.push(aacSample);\n                track.length += aacData.data.length;\n            } else {\n                Log.e(this.TAG, `Flv: Unsupported AAC data type ${aacData.packetType}`);\n            }\n        } else if (soundFormat === 2) {  // MP3\n            if (!meta.codec) {\n                // We need metadata for mp3 audio track, extract info from frame header\n                let misc = this._parseMP3AudioData(payload.slice(1), true);\n                if (misc == undefined) {\n                    return;\n                }\n                meta.audioSampleRate = misc.samplingRate;\n                meta.channelCount = misc.channelCount;\n                meta.codec = misc.codec;\n                meta.originalCodec = misc.originalCodec;\n                // The decode result of an mp3 sample is 1152 PCM samples\n                meta.refSampleDuration = 1152 / meta.audioSampleRate * meta.timescale;\n                Log.v(this.TAG, 'Parsed MPEG Audio Frame Header');\n\n                this._audioInitialMetadataDispatched = true;\n                this._onTrackMetadata('audio', meta);\n\n                let mi = this._mediaInfo;\n                mi.audioCodec = meta.codec;\n                mi.audioSampleRate = meta.audioSampleRate;\n                mi.audioChannelCount = meta.channelCount;\n                mi.audioDataRate = misc.bitRate;\n                if (mi.hasVideo) {\n                    if (mi.videoCodec != null) {\n                        mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                    }\n                } else {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.audioCodec + '\"';\n                }\n                if (mi.isComplete()) {\n                    this._onMediaInfo(mi);\n                }\n            }\n\n            // This packet is always a valid audio packet, extract it\n            let data = this._parseMP3AudioData(payload.slice(1), false);\n            if (data == undefined) {\n                return;\n            }\n            let dts = this._timestampBase + tagTimestamp;\n            let mp3Sample = {unit: data, length: data.byteLength, dts: dts, pts: dts};\n            track.samples.push(mp3Sample);\n            track.length += data.length;\n        }\n    }\n\n    /**\n     *\n     * @param {Uint8Array} payload\n     * @returns {{}}\n     * @private\n     */\n    _parseAACAudioData(payload) {\n        if (payload.length <= 1) {\n            Log.w(this.TAG, 'Flv: Invalid AAC packet, missing AACPacketType or/and Data!');\n            return;\n        }\n\n        let result = {};\n\n        result.packetType = payload[0];\n\n        if (payload[0] === 0) {\n            result.data = this._parseAACAudioSpecificConfig(payload.slice(1));\n        } else {\n            result.data = payload.subarray(1);\n        }\n\n        return result;\n    }\n\n    /**\n     *\n     * @param {Uint8Array} array\n     * @returns {{channelCount: number, codec: string, originalCodec: string, samplingRate: *, config: any[]}}\n     * @private\n     */\n    _parseAACAudioSpecificConfig(array) {\n        let config = null;\n\n        /* Audio Object Type:\n           0: Null\n           1: AAC Main\n           2: AAC LC\n           3: AAC SSR (Scalable Sample Rate)\n           4: AAC LTP (Long Term Prediction)\n           5: HE-AAC / SBR (Spectral Band Replication)\n           6: AAC Scalable\n        */\n\n        let audioObjectType = 0;\n        let originalAudioObjectType = 0;\n        let audioExtensionObjectType = null;\n        let samplingIndex = 0;\n        let extensionSamplingIndex = null;\n\n        // 5 bits\n        audioObjectType = originalAudioObjectType = array[0] >>> 3;\n        // 4 bits\n        samplingIndex = ((array[0] & 0x07) << 1) | (array[1] >>> 7);\n        if (samplingIndex < 0 || samplingIndex >= this._mpegSamplingRates.length) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: AAC invalid sampling frequency index!');\n            return;\n        }\n\n        let samplingFrequence = this._mpegSamplingRates[samplingIndex];\n\n        // 4 bits\n        let channelConfig = (array[1] & 0x78) >>> 3;\n        if (channelConfig < 0 || channelConfig >= 8) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: AAC invalid channel configuration');\n            return;\n        }\n\n        if (audioObjectType === 5) {  // HE-AAC?\n            // 4 bits\n            extensionSamplingIndex = ((array[1] & 0x07) << 1) | (array[2] >>> 7);\n            // 5 bits\n            audioExtensionObjectType = (array[2] & 0x7C) >>> 2;\n        }\n\n        // workarounds for various browsers\n        let userAgent = self.navigator.userAgent.toLowerCase();\n\n        if (userAgent.indexOf('firefox') !== -1) {\n            // firefox: use SBR (HE-AAC) if freq less than 24kHz\n            if (samplingIndex >= 6) {\n                audioObjectType = 5;\n                config = new Array(4);\n                extensionSamplingIndex = samplingIndex - 3;\n            } else {  // use LC-AAC\n                audioObjectType = 2;\n                config = new Array(2);\n                extensionSamplingIndex = samplingIndex;\n            }\n        } else if (userAgent.indexOf('android') !== -1) {\n            // android: always use LC-AAC\n            audioObjectType = 2;\n            config = new Array(2);\n            extensionSamplingIndex = samplingIndex;\n        } else {\n            // for other browsers, e.g. chrome...\n            // Always use HE-AAC to make it easier to switch aac codec profile\n            audioObjectType = 5;\n            extensionSamplingIndex = samplingIndex;\n            config = new Array(4);\n\n            if (samplingIndex >= 6) {\n                extensionSamplingIndex = samplingIndex - 3;\n            } else if (channelConfig === 1) {  // Mono channel\n                audioObjectType = 2;\n                config = new Array(2);\n                extensionSamplingIndex = samplingIndex;\n            }\n        }\n\n        config[0]  = audioObjectType << 3;\n        config[0] |= (samplingIndex & 0x0F) >>> 1;\n        config[1]  = (samplingIndex & 0x0F) << 7;\n        config[1] |= (channelConfig & 0x0F) << 3;\n        if (audioObjectType === 5) {\n            config[1] |= ((extensionSamplingIndex & 0x0F) >>> 1);\n            config[2]  = (extensionSamplingIndex & 0x01) << 7;\n            // extended audio object type: force to 2 (LC-AAC)\n            config[2] |= (2 << 2);\n            config[3]  = 0;\n        }\n\n        return {\n            config: config,\n            samplingRate: samplingFrequence,\n            channelCount: channelConfig,\n            codec: 'mp4a.40.' + audioObjectType,\n            originalCodec: 'mp4a.40.' + originalAudioObjectType\n        };\n    }\n\n    /**\n     *\n     * @param {Uint8Array} array\n     * @param requestHeader\n     * @returns {*}\n     * @private\n     */\n    _parseMP3AudioData(array, requestHeader) {\n        if (array.length < 4) {\n            Log.w(this.TAG, 'Flv: Invalid MP3 packet, header missing!');\n            return;\n        }\n\n        let result = null;\n\n        if (requestHeader) {\n            if (array[0] !== 0xFF) {\n                return;\n            }\n            let ver = (array[1] >>> 3) & 0x03;\n            let layer = (array[1] & 0x06) >> 1;\n\n            let bitrate_index = (array[2] & 0xF0) >>> 4;\n            let sampling_freq_index = (array[2] & 0x0C) >>> 2;\n\n            let channel_mode = (array[3] >>> 6) & 0x03;\n            let channel_count = channel_mode !== 3 ? 2 : 1;\n\n            let sample_rate = 0;\n            let bit_rate = 0;\n            let object_type = 34;  // Layer-3, listed in MPEG-4 Audio Object Types\n\n            let codec = 'mp3';\n\n            switch (ver) {\n                case 0:  // MPEG 2.5\n                    sample_rate = this._mpegAudioV25SampleRateTable[sampling_freq_index];\n                    break;\n                case 2:  // MPEG 2\n                    sample_rate = this._mpegAudioV20SampleRateTable[sampling_freq_index];\n                    break;\n                case 3:  // MPEG 1\n                    sample_rate = this._mpegAudioV10SampleRateTable[sampling_freq_index];\n                    break;\n            }\n\n            switch (layer) {\n                case 1:  // Layer 3\n                    object_type = 34;\n                    if (bitrate_index < this._mpegAudioL3BitRateTable.length) {\n                        bit_rate = this._mpegAudioL3BitRateTable[bitrate_index];\n                    }\n                    break;\n                case 2:  // Layer 2\n                    object_type = 33;\n                    if (bitrate_index < this._mpegAudioL2BitRateTable.length) {\n                        bit_rate = this._mpegAudioL2BitRateTable[bitrate_index];\n                    }\n                    break;\n                case 3:  // Layer 1\n                    object_type = 32;\n                    if (bitrate_index < this._mpegAudioL1BitRateTable.length) {\n                        bit_rate = this._mpegAudioL1BitRateTable[bitrate_index];\n                    }\n                    break;\n            }\n\n            result = {\n                bitRate: bit_rate,\n                samplingRate: sample_rate,\n                channelCount: channel_count,\n                codec: codec,\n                originalCodec: codec\n            };\n        } else {\n            result = array;\n        }\n\n        return result;\n    }\n\n    /**\n     *\n     * @param {Uint8Array} payload\n     * @param tagTimestamp\n     * @param tagPosition\n     * @private\n     */\n    _parseVideoData(payload, tagTimestamp, tagPosition) {\n        if (payload.length <= 1) {\n            Log.w(this.TAG, 'Flv: Invalid video packet, missing VideoData payload!');\n            return;\n        }\n\n        if (this._hasVideoFlagOverrided === true && this._hasVideo === false) {\n            // If hasVideo: false indicated explicitly in MediaDataSource,\n            // Ignore all the video packets\n            return;\n        }\n\n        let spec = payload[0];\n\n        let frameType = (spec & 240) >>> 4;\n        let codecId = spec & 15;\n\n        if (codecId !== 7) {\n            this._onError(DemuxErrors.CODEC_UNSUPPORTED, `Flv: Unsupported codec in video frame: ${codecId}`);\n            return;\n        }\n\n        this._parseAVCVideoPacket(payload.slice(1), tagTimestamp, tagPosition, frameType);\n    }\n\n    /**\n     *\n     * @param {Uint8Array} payload\n     * @param tagTimestamp\n     * @param tagPosition\n     * @param frameType\n     * @private\n     */\n    _parseAVCVideoPacket(payload, tagTimestamp, tagPosition, frameType) {\n        if (payload.length < 4) {\n            Log.w(this.TAG, 'Flv: Invalid AVC packet, missing AVCPacketType or/and CompositionTime');\n            return;\n        }\n\n        let le = this._littleEndian;\n        let v = new DataView(payload.buffer);\n\n        let packetType = v.getUint8(0);\n        let cts_unsigned = v.getUint32(0, !le) & 0x00FFFFFF;\n        let cts = (cts_unsigned << 8) >> 8;  // convert to 24-bit signed int\n\n        if (packetType === 0) {  // AVCDecoderConfigurationRecord\n            this._parseAVCDecoderConfigurationRecord(payload.slice(4));\n        } else if (packetType === 1) {  // One or more Nalus\n            this._parseAVCVideoData(payload.slice(4), tagTimestamp, tagPosition, frameType, cts);\n        } else if (packetType === 2) {\n            // empty, AVC end of sequence\n        } else {\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Invalid video packet type ${packetType}`);\n            return;\n        }\n    }\n\n    /**\n     *\n     * @param {Uint8Array} payload\n     * @private\n     */\n    _parseAVCDecoderConfigurationRecord(payload) {\n        if (payload.length < 7) {\n            Log.w(this.TAG, 'Flv: Invalid AVCDecoderConfigurationRecord, lack of data!');\n            return;\n        }\n\n        let meta = this._videoMetadata;\n        let track = this._videoTrack;\n        let le = this._littleEndian;\n        let v = new DataView(payload.buffer);\n\n        if (!meta) {\n            if (this._hasVideo === false && this._hasVideoFlagOverrided === false) {\n                this._hasVideo = true;\n                this._mediaInfo.hasVideo = true;\n            }\n\n            meta = this._videoMetadata = {};\n            meta.type = 'video';\n            meta.id = track.id;\n            meta.timescale = this._timescale;\n            meta.duration = this._duration;\n\n        } else {\n            if (typeof meta.avcc !== 'undefined') {\n                Log.w(this.TAG, 'Found another AVCDecoderConfigurationRecord!');\n            }\n        }\n\n        let version = v.getUint8(0);  // configurationVersion\n        let avcProfile = v.getUint8(1);  // avcProfileIndication\n        let profileCompatibility = v.getUint8(2);  // profile_compatibility\n        let avcLevel = v.getUint8(3);  // AVCLevelIndication\n\n        if (version !== 1 || avcProfile === 0) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord');\n            return;\n        }\n\n        this._naluLengthSize = (v.getUint8(4) & 3) + 1;  // lengthSizeMinusOne\n        if (this._naluLengthSize !== 3 && this._naluLengthSize !== 4) {  // holy shit!!!\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Strange NaluLengthSizeMinusOne: ${this._naluLengthSize - 1}`);\n            return;\n        }\n\n        let spsCount = v.getUint8(5) & 31;  // numOfSequenceParameterSets\n        if (spsCount === 0) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No SPS');\n            return;\n        } else if (spsCount > 1) {\n            Log.w(this.TAG, `Flv: Strange AVCDecoderConfigurationRecord: SPS Count = ${spsCount}`);\n        }\n\n        let offset = 6;\n\n        for (let i = 0; i < spsCount; i++) {\n            let len = v.getUint16(offset, !le);  // sequenceParameterSetLength\n            offset += 2;\n\n            if (len === 0) {\n                continue;\n            }\n\n            // Notice: Nalu without startcode header (00 00 00 01)\n            let sps = new Uint8Array(payload.slice(offset, offset + len));\n            offset += len;\n\n            let config = SPSParser.parseSPS(sps);\n            if (i !== 0) {\n                // ignore other sps's config\n                continue;\n            }\n\n            meta.codecWidth = config.codec_size.width;\n            meta.codecHeight = config.codec_size.height;\n            meta.presentWidth = config.present_size.width;\n            meta.presentHeight = config.present_size.height;\n\n            meta.profile = config.profile_string;\n            meta.level = config.level_string;\n            meta.bitDepth = config.bit_depth;\n            meta.chromaFormat = config.chroma_format;\n            meta.sarRatio = config.sar_ratio;\n            meta.frameRate = config.frame_rate;\n\n            if (config.frame_rate.fixed === false ||\n                config.frame_rate.fps_num === 0 ||\n                config.frame_rate.fps_den === 0) {\n                meta.frameRate = this._referenceFrameRate;\n            }\n\n            let fps_den = meta.frameRate.fps_den;\n            let fps_num = meta.frameRate.fps_num;\n            meta.refSampleDuration = meta.timescale * (fps_den / fps_num);\n\n            let codecArray = sps.subarray(1, 4);\n            let codecString = 'avc1.';\n            for (let j = 0; j < 3; j++) {\n                let h = codecArray[j].toString(16);\n                if (h.length < 2) {\n                    h = '0' + h;\n                }\n                codecString += h;\n            }\n            meta.codec = codecString;\n\n            let mi = this._mediaInfo;\n            mi.width = meta.codecWidth;\n            mi.height = meta.codecHeight;\n            mi.fps = meta.frameRate.fps;\n            mi.profile = meta.profile;\n            mi.level = meta.level;\n            mi.refFrames = config.ref_frames;\n            mi.chromaFormat = config.chroma_format_string;\n            mi.sarNum = meta.sarRatio.width;\n            mi.sarDen = meta.sarRatio.height;\n            mi.videoCodec = codecString;\n\n            if (mi.hasAudio) {\n                if (mi.audioCodec != null) {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                }\n            } else {\n                mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + '\"';\n            }\n            if (mi.isComplete()) {\n                this._onMediaInfo(mi);\n            }\n        }\n\n        let ppsCount = v.getUint8(offset);  // numOfPictureParameterSets\n        if (ppsCount === 0) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No PPS');\n            return;\n        } else if (ppsCount > 1) {\n            Log.w(this.TAG, `Flv: Strange AVCDecoderConfigurationRecord: PPS Count = ${ppsCount}`);\n        }\n\n        offset++;\n\n        for (let i = 0; i < ppsCount; i++) {\n            let len = v.getUint16(offset, !le);  // pictureParameterSetLength\n            offset += 2;\n\n            if (len === 0) {\n                continue;\n            }\n\n            // pps is useless for extracting video information\n            offset += len;\n        }\n\n        meta.avcc = new Uint8Array(payload.length);\n        meta.avcc.set(new Uint8Array(payload), 0);\n        Log.v(this.TAG, 'Parsed AVCDecoderConfigurationRecord');\n\n        if (this._isInitialMetadataDispatched()) {\n            // flush parsed frames\n            if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                this._onDataAvailable(this._audioTrack, this._videoTrack);\n            }\n        } else {\n            this._videoInitialMetadataDispatched = true;\n        }\n        // notify new metadata\n        this._dispatch = false;\n        this._onTrackMetadata('video', meta);\n    }\n\n    _parseAVCVideoData(payload, tagTimestamp, tagPosition, frameType, cts) {\n        Log.v(this.TAG, tagTimestamp, tagPosition, this._timestampBase);\n\n        let le = this._littleEndian;\n        let v = new DataView(payload.buffer);\n\n        let units = [], length = 0;\n\n        let dataSize = payload.length;\n\n        let offset = 0;\n        const lengthSize = this._naluLengthSize;\n        let dts = this._timestampBase + tagTimestamp;\n        let keyframe = (frameType === 1);  // from FLV Frame Type constants\n\n        while (offset < dataSize) {\n            if (offset + 4 >= dataSize) {\n                Log.w(this.TAG, `Malformed Nalu near timestamp ${dts}, offset = ${offset}, dataSize = ${dataSize}`);\n                break;  // data not enough for next Nalu\n            }\n            // Nalu with length-header (AVC1)\n            let naluSize = v.getUint32(offset, !le);  // Big-Endian read\n            if (lengthSize === 3) {\n                naluSize >>>= 8;\n            }\n            if (naluSize > dataSize - lengthSize) {\n                Log.w(this.TAG, `Malformed Nalus near timestamp ${dts}, NaluSize > DataSize!`);\n                return;\n            }\n\n            let unitType = v.getUint8(offset + lengthSize) & 0x1F;\n\n            if (unitType === 5) {  // IDR\n                keyframe = true;\n            }\n\n            let data = new Uint8Array(payload.slice(offset, offset + lengthSize + naluSize));\n            let unit = {type: unitType, data: data};\n            units.push(unit);\n            length += data.byteLength;\n\n            offset += lengthSize + naluSize;\n        }\n\n        if (units.length) {\n            let track = this._videoTrack;\n            let avcSample = {\n                units: units,\n                length: length,\n                isKeyframe: keyframe,\n                dts: dts,\n                cts: cts,\n                pts: (dts + cts)\n            };\n            if (keyframe) {\n                avcSample.fileposition = tagPosition;\n            }\n            track.samples.push(avcSample);\n            track.length += length;\n        }\n    }\n}\n\nexport default RTMPMediaMessageHandler;\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {TransmuxingEvents} from \"../utils/utils\";\nimport EventEmitter from \"../utils/event_emitter\";\nimport MP4Remuxer from \"../formats/mp4-remuxer\";\nimport MediaInfo from \"../formats/media-info\";\nimport Browser from \"../utils/browser\";\nimport Log from \"../utils/logger\";\n\nclass Transmuxer {\n    TAG = 'Transmuxer';\n\n    constructor(config) {\n        this._emitter = new EventEmitter();\n\n        this._config = config;\n\n        this._currentSegmentIndex = 0;\n\n        this._mediaInfo = null;\n        this._ioctl = null;\n\n        this._pendingSeekTime = null;\n        this._pendingResolveSeekPoint = null;\n\n        this._statisticsReporter = null;\n\n        this._remuxer = new MP4Remuxer(this._config);\n        this._remuxer.onInitSegment = this._onRemuxerInitSegmentArrival.bind(this);\n        this._remuxer.onMediaSegment = this._onRemuxerMediaSegmentArrival.bind(this);\n    }\n\n    destroy() {\n        this._mediaInfo = null;\n        this._mediaDataSource = null;\n\n        if (this._statisticsReporter) {\n            this._disableStatisticsReporter();\n        }\n        if (this._ioctl) {\n            this._ioctl.destroy();\n            this._ioctl = null;\n        }\n\n        if (this._remuxer) {\n            this._remuxer.destroy();\n            this._remuxer = null;\n        }\n\n        this._emitter.removeAllListeners();\n        this._emitter = null;\n    }\n\n    on(event, listener) {\n        this._emitter.addListener(event, listener);\n    }\n\n    off(event, listener) {\n        this._emitter.removeListener(event, listener);\n    }\n\n    remux(audioTrack, videoTrack){\n        this._remuxer.remux(audioTrack, videoTrack);\n    }\n\n    _onTrackMetadataReceived(type, metadata) {\n        this._remuxer._onTrackMetadataReceived(type, metadata);\n    }\n\n    stop() {\n        this._internalAbort();\n    }\n\n    _internalAbort() {\n        if (this._ioctl) {\n            this._ioctl.destroy();\n            this._ioctl = null;\n        }\n    }\n\n    _searchSegmentIndexContains(milliseconds) {\n        let segments = this._mediaDataSource.segments;\n        let idx = segments.length - 1;\n\n        for (let i = 0; i < segments.length; i++) {\n            if (milliseconds < segments[i].timestampBase) {\n                idx = i - 1;\n                break;\n            }\n        }\n        return idx;\n    }\n\n    _onMediaInfo(mediaInfo) {\n        if (this._mediaInfo == null) {\n            // Store first segment's mediainfo as global mediaInfo\n            this._mediaInfo = Object.assign({}, mediaInfo);\n            this._mediaInfo.keyframesIndex = null;\n            this._mediaInfo.segments = [];\n            //this._mediaInfo.segmentCount = this._mediaDataSource.segments.length;\n            Object.setPrototypeOf(this._mediaInfo, MediaInfo.prototype);\n        }\n\n        let segmentInfo = Object.assign({}, mediaInfo);\n        Object.setPrototypeOf(segmentInfo, MediaInfo.prototype);\n        this._mediaInfo.segments[this._currentSegmentIndex] = segmentInfo;\n\n        // notify mediaInfo update\n        this._reportSegmentMediaInfo(this._currentSegmentIndex);\n\n        /*\n        if (this._pendingSeekTime != null) {\n            Promise.resolve().then(() => {\n                let target = this._pendingSeekTime;\n                this._pendingSeekTime = null;\n                this.seek(target);\n            });\n        }*/\n    }\n\n    _onMetaDataArrived(metadata) {\n        this._emitter.emit(TransmuxingEvents.METADATA_ARRIVED, metadata);\n    }\n\n    _onScriptDataArrived(data) {\n        this._emitter.emit(TransmuxingEvents.SCRIPTDATA_ARRIVED, data);\n    }\n\n    _onRemuxerInitSegmentArrival(type, initSegment) {\n        this._emitter.emit(TransmuxingEvents.INIT_SEGMENT, type, initSegment);\n    }\n\n    _onRemuxerMediaSegmentArrival(type, mediaSegment) {\n        Log.d(this.TAG, \"_onRemuxerMediaSegmentArrival\");\n        if (this._pendingSeekTime != null) {\n            // Media segments after new-segment cross-seeking should be dropped.\n            return;\n        }\n        this._emitter.emit(TransmuxingEvents.MEDIA_SEGMENT, type, mediaSegment);\n\n        // Resolve pending seekPoint\n        if (this._pendingResolveSeekPoint != null && type === 'video') {\n            let syncPoints = mediaSegment.info.syncPoints;\n            let seekpoint = this._pendingResolveSeekPoint;\n            this._pendingResolveSeekPoint = null;\n\n            // Safari: Pass PTS for recommend_seekpoint\n            if (Browser.safari && syncPoints.length > 0 && syncPoints[0].originalDts === seekpoint) {\n                seekpoint = syncPoints[0].pts;\n            }\n            // else: use original DTS (keyframe.milliseconds)\n\n            this._emitter.emit(TransmuxingEvents.RECOMMEND_SEEKPOINT, seekpoint);\n        }\n    }\n}\n\nexport default Transmuxer;\n","/*\n *\n * Copyright (C) 2023 itNOX. All Rights Reserved.\n *\n * @author Michael Balen <mb@itnox.de>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport Log from \"../utils/logger\";\n\nclass EventEmitter{\n\tListenerList = [];\n\tTAG = \"EventEmitter\";\n\n\tconstructor() {\n\t}\n\n\t/**\n\t *\n\t * @param {String} event\n\t * @param {Function} listener\n\t */\n\taddEventListener(event, listener){\n\t\tthis.ListenerList.push([event, listener]);\n\t}\n\n\t/**\n\t *\n\t * @param {String} event\n\t * @param {Function} listener\n\t */\n\taddListener(event, listener){\n\t\tthis.ListenerList.push([event, listener]);\n\t}\n\n\n\t/**\n\t *\n\t * @param {String} event\n\t * @param {Function} listener\n\t */\n\tremoveListener(event, listener){\n\t\tfor(let i = 0; i < this.ListenerList.length;i++){\n\t\t\tlet entry = this.ListenerList[i];\n\t\t\tif(entry[0] == event && entry[1] == listener){\n\t\t\t\tthis.ListenerList.splice(i,1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Remove all listener\n\t */\n\tremoveAllListeners(){\n\t\tthis.ListenerList = [];\n\t}\n\n\t/**\n\t *\n\t * @param {String} event\n\t * @param data\n\t */\n\temit(event, ...data){\n\t\tLog.t(this.TAG, \"emit EVENT: \" + event, ...data);\n\t\tfor(let i = 0; i < this.ListenerList.length;i++){\n\t\t\tlet entry = this.ListenerList[i];\n\t\t\tif(entry[0] === event){\n\t\t\t\tentry[1].call(this, ...data);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default EventEmitter;\n\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n// Fragmented mp4 remuxer\nimport MP4 from \"./mp4\";\nimport {MediaSegmentInfo, MediaSegmentInfoList, SampleInfo} from \"./media-segment-info\";\nimport AAC from \"./aac-silent\";\nimport {IllegalStateException} from \"../utils/exception\";\nimport Browser from \"../utils/browser\";\nimport Log from \"../utils/logger\";\n\nclass MP4Remuxer {\n\tTAG = 'MP4Remuxer'\n\n\tconstructor(config) {\n\t\tthis._config = config;\n\t\tthis._isLive = (config.isLive === true);\n\n\t\tthis._dtsBase = -1;\n\t\tthis._dtsBaseInited = false;\n\t\tthis._audioDtsBase = Infinity;\n\t\tthis._videoDtsBase = Infinity;\n\t\tthis._audioNextDts = undefined;\n\t\tthis._videoNextDts = undefined;\n\t\tthis._audioStashedLastSample = null;\n\t\tthis._videoStashedLastSample = null;\n\n\t\tthis._audioMeta = null;\n\t\tthis._videoMeta = null;\n\n\t\tthis._audioSegmentInfoList = new MediaSegmentInfoList('audio');\n\t\tthis._videoSegmentInfoList = new MediaSegmentInfoList('video');\n\n\t\tthis._onInitSegment = null;\n\t\tthis._onMediaSegment = null;\n\n\t\t// Workaround for chrome < 50: Always force first sample as a Random Access Point in media segment\n\t\t// see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n\t\tthis._forceFirstIDR = (Browser.chrome &&\n\t\t\t(Browser.version.major < 50 ||\n\t\t\t\t(Browser.version.major === 50 && Browser.version.build < 2661))) ? true : false;\n\n\t\t// Workaround for IE11/Edge: Fill silent aac frame after keyframe-seeking\n\t\t// Make audio beginDts equals with video beginDts, in order to fix seek freeze\n\t\tthis._fillSilentAfterSeek = (Browser.msedge || Browser.msie);\n\n\t\t// While only FireFox supports 'audio/mp4, codecs=\"mp3\"', use 'audio/mpeg' for chrome, safari, ...\n\t\tthis._mp3UseMpegAudio = !Browser.firefox;\n\n\t\tthis._fillAudioTimestampGap = this._config.fixAudioTimestampGap;\n\t}\n\n\tdestroy() {\n\t\tthis._dtsBase = -1;\n\t\tthis._dtsBaseInited = false;\n\t\tthis._audioMeta = null;\n\t\tthis._videoMeta = null;\n\t\tthis._audioSegmentInfoList.clear();\n\t\tthis._audioSegmentInfoList = null;\n\t\tthis._videoSegmentInfoList.clear();\n\t\tthis._videoSegmentInfoList = null;\n\t\tthis._onInitSegment = null;\n\t\tthis._onMediaSegment = null;\n\t}\n\n\tget onInitSegment() {\n\t\treturn this._onInitSegment;\n\t}\n\n\tset onInitSegment(callback) {\n\t\tthis._onInitSegment = callback;\n\t}\n\n\tget onMediaSegment() {\n\t\treturn this._onMediaSegment;\n\t}\n\n\tset onMediaSegment(callback) {\n\t\tthis._onMediaSegment = callback;\n\t}\n\n\tinsertDiscontinuity() {\n\t\tthis._audioNextDts = this._videoNextDts = undefined;\n\t}\n\n\tseek(originalDts) {\n\t\tthis._audioStashedLastSample = null;\n\t\tthis._videoStashedLastSample = null;\n\t\tthis._videoSegmentInfoList.clear();\n\t\tthis._audioSegmentInfoList.clear();\n\t}\n\n\tremux(audioTrack, videoTrack) {\n\t\tif (!this._onMediaSegment) {\n\t\t\tthrow new IllegalStateException('MP4Remuxer: onMediaSegment callback must be specificed!');\n\t\t}\n\t\tif (!this._dtsBaseInited) {\n\t\t\tthis._calculateDtsBase(audioTrack, videoTrack);\n\t\t}\n\t\tthis._remuxVideo(videoTrack);\n\t\tthis._remuxAudio(audioTrack);\n\t}\n\n\t_onTrackMetadataReceived(type, metadata) {\n\t\tLog.i(this.TAG, \"_onTrackMetadataReceived\");\n\t\tlet metabox = null;\n\n\t\tlet container = 'mp4';\n\t\tlet codec = metadata.codec;\n\n\t\tif (type === 'audio') {\n\t\t\tthis._audioMeta = metadata;\n\t\t\tif (metadata.codec === 'mp3' && this._mp3UseMpegAudio) {\n\t\t\t\t// 'audio/mpeg' for MP3 audio track\n\t\t\t\tcontainer = 'mpeg';\n\t\t\t\tcodec = '';\n\t\t\t\tmetabox = new Uint8Array(0);\n\t\t\t} else {\n\t\t\t\t// 'audio/mp4, codecs=\"codec\"'\n\t\t\t\tmetabox = MP4.generateInitSegment(metadata);\n\t\t\t}\n\t\t} else if (type === 'video') {\n\t\t\tthis._videoMeta = metadata;\n\t\t\tmetabox = MP4.generateInitSegment(metadata);\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\t// dispatch metabox (Initialization Segment)\n\t\tif (!this._onInitSegment) {\n\t\t\tthrow new IllegalStateException('MP4Remuxer: onInitSegment callback must be specified!');\n\t\t}\n\t\tthis._onInitSegment(type, {\n\t\t\ttype: type,\n\t\t\tdata: metabox.buffer,\n\t\t\tcodec: codec,\n\t\t\tcontainer: `${type}/${container}`,\n\t\t\tmediaDuration: metadata.duration  // in timescale 1000 (milliseconds)\n\t\t});\n\t}\n\n\t_calculateDtsBase(audioTrack, videoTrack) {\n\t\tif (this._dtsBaseInited) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (audioTrack.samples && audioTrack.samples.length) {\n\t\t\tthis._audioDtsBase = audioTrack.samples[0].dts;\n\t\t}\n\t\tif (videoTrack.samples && videoTrack.samples.length) {\n\t\t\tthis._videoDtsBase = videoTrack.samples[0].dts;\n\t\t}\n\n\t\tthis._dtsBase = Math.min(this._audioDtsBase, this._videoDtsBase);\n\t\tthis._dtsBaseInited = true;\n\t}\n\n\tflushStashedSamples() {\n\t\tlet videoSample = this._videoStashedLastSample;\n\t\tlet audioSample = this._audioStashedLastSample;\n\n\t\tlet videoTrack = {\n\t\t\ttype: 'video',\n\t\t\tid: 1,\n\t\t\tsequenceNumber: 0,\n\t\t\tsamples: [],\n\t\t\tlength: 0\n\t\t};\n\n\t\tif (videoSample != null) {\n\t\t\tvideoTrack.samples.push(videoSample);\n\t\t\tvideoTrack.length = videoSample.length;\n\t\t}\n\n\t\tlet audioTrack = {\n\t\t\ttype: 'audio',\n\t\t\tid: 2,\n\t\t\tsequenceNumber: 0,\n\t\t\tsamples: [],\n\t\t\tlength: 0\n\t\t};\n\n\t\tif (audioSample != null) {\n\t\t\taudioTrack.samples.push(audioSample);\n\t\t\taudioTrack.length = audioSample.length;\n\t\t}\n\n\t\tthis._videoStashedLastSample = null;\n\t\tthis._audioStashedLastSample = null;\n\n\t\tthis._remuxVideo(videoTrack, true);\n\t\tthis._remuxAudio(audioTrack, true);\n\t}\n\n\t_remuxAudio(audioTrack, force) {\n\t\tLog.i(this.TAG, \"_remuxAudio\");\n\t\tif (this._audioMeta == null) {\n\t\t\tLog.w(this.TAG, \"no audioMeta\");\n\t\t\treturn;\n\t\t}\n\n\t\tlet track = audioTrack;\n\t\tlet samples = track.samples;\n\t\tlet dtsCorrection = undefined;\n\t\tlet firstDts = -1, lastDts = -1, lastPts = -1;\n\t\tlet refSampleDuration = this._audioMeta.refSampleDuration;\n\n\t\tlet mpegRawTrack = this._audioMeta.codec === 'mp3' && this._mp3UseMpegAudio;\n\t\tlet firstSegmentAfterSeek = this._dtsBaseInited && this._audioNextDts === undefined;\n\n\t\tlet insertPrefixSilentFrame = false;\n\n\t\tif (!samples || samples.length === 0) {\n\t\t\tLog.w(this.TAG, \"no samples\");\n\t\t\treturn;\n\t\t}\n\t\tif (samples.length === 1 && !force) {\n\t\t\t// If [sample count in current batch] === 1 && (force != true)\n\t\t\t// Ignore and keep in demuxer's queue\n\t\t\tLog.w(this.TAG, \"1 sample\");\n\t\t\treturn;\n\t\t}  // else if (force === true) do remux\n\n\t\tlet offset = 0;\n\t\tlet mdatbox = null;\n\t\tlet mdatBytes = 0;\n\n\t\t// calculate initial mdat size\n\t\tif (mpegRawTrack) {\n\t\t\t// for raw mpeg buffer\n\t\t\toffset = 0;\n\t\t\tmdatBytes = track.length;\n\t\t} else {\n\t\t\t// for fmp4 mdat box\n\t\t\toffset = 8;  // size + type\n\t\t\tmdatBytes = 8 + track.length;\n\t\t}\n\n\n\t\tlet lastSample = null;\n\n\t\t// Pop the lastSample and waiting for stash\n\t\tif (samples.length > 1) {\n\t\t\tlastSample = samples.pop();\n\t\t\tmdatBytes -= lastSample.length;\n\t\t}\n\n\t\t// Insert [stashed lastSample in the previous batch] to the front\n\t\tif (this._audioStashedLastSample != null) {\n\t\t\tlet sample = this._audioStashedLastSample;\n\t\t\tthis._audioStashedLastSample = null;\n\t\t\tsamples.unshift(sample);\n\t\t\tmdatBytes += sample.length;\n\t\t}\n\n\t\t// Stash the lastSample of current batch, waiting for next batch\n\t\tif (lastSample != null) {\n\t\t\tthis._audioStashedLastSample = lastSample;\n\t\t}\n\n\n\t\tlet firstSampleOriginalDts = samples[0].dts - this._dtsBase;\n\n\t\t// calculate dtsCorrection\n\t\tif (this._audioNextDts) {\n\t\t\tdtsCorrection = firstSampleOriginalDts - this._audioNextDts;\n\t\t} else {  // this._audioNextDts == undefined\n\t\t\tif (this._audioSegmentInfoList.isEmpty()) {\n\t\t\t\tdtsCorrection = 0;\n\t\t\t\tif (this._fillSilentAfterSeek && !this._videoSegmentInfoList.isEmpty()) {\n\t\t\t\t\tif (this._audioMeta.originalCodec !== 'mp3') {\n\t\t\t\t\t\tinsertPrefixSilentFrame = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet lastSample = this._audioSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);\n\t\t\t\tif (lastSample != null) {\n\t\t\t\t\tlet distance = (firstSampleOriginalDts - (lastSample.originalDts + lastSample.duration));\n\t\t\t\t\tif (distance <= 3) {\n\t\t\t\t\t\tdistance = 0;\n\t\t\t\t\t}\n\t\t\t\t\tlet expectedDts = lastSample.dts + lastSample.duration + distance;\n\t\t\t\t\tdtsCorrection = firstSampleOriginalDts - expectedDts;\n\t\t\t\t} else { // lastSample == null, cannot found\n\t\t\t\t\tdtsCorrection = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (insertPrefixSilentFrame) {\n\t\t\t// align audio segment beginDts to match with current video segment's beginDts\n\t\t\tlet firstSampleDts = firstSampleOriginalDts - dtsCorrection;\n\t\t\tlet videoSegment = this._videoSegmentInfoList.getLastSegmentBefore(firstSampleOriginalDts);\n\t\t\tif (videoSegment != null && videoSegment.beginDts < firstSampleDts) {\n\t\t\t\tlet silentUnit = AAC.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);\n\t\t\t\tif (silentUnit) {\n\t\t\t\t\tlet dts = videoSegment.beginDts;\n\t\t\t\t\tlet silentFrameDuration = firstSampleDts - videoSegment.beginDts;\n\t\t\t\t\tLog.v(this.TAG, `InsertPrefixSilentAudio: dts: ${dts}, duration: ${silentFrameDuration}`);\n\t\t\t\t\tsamples.unshift({ unit: silentUnit, dts: dts, pts: dts });\n\t\t\t\t\tmdatBytes += silentUnit.byteLength;\n\t\t\t\t}  // silentUnit == null: Cannot generate, skip\n\t\t\t} else {\n\t\t\t\tinsertPrefixSilentFrame = false;\n\t\t\t}\n\t\t}\n\n\t\tlet mp4Samples = [];\n\n\t\t// Correct dts for each sample, and calculate sample duration. Then output to mp4Samples\n\t\tfor (let i = 0; i < samples.length; i++) {\n\t\t\tlet sample = samples[i];\n\t\t\tlet unit = sample.unit;\n\t\t\tlet originalDts = sample.dts - this._dtsBase;\n\t\t\tlet dts = originalDts;\n\t\t\tlet needFillSilentFrames = false;\n\t\t\tlet silentFrames = null;\n\t\t\tlet sampleDuration = 0;\n\n\t\t\tif (originalDts < -0.001) {\n\t\t\t\tcontinue; //pass the first sample with the invalid dts\n\t\t\t}\n\n\t\t\tif (this._audioMeta.codec !== 'mp3') {\n\t\t\t\t// for AAC codec, we need to keep dts increase based on refSampleDuration\n\t\t\t\tlet curRefDts = originalDts;\n\t\t\t\tconst maxAudioFramesDrift = 3;\n\t\t\t\tif (this._audioNextDts) {\n\t\t\t\t\tcurRefDts = this._audioNextDts;\n\t\t\t\t}\n\n\t\t\t\tdtsCorrection = originalDts - curRefDts;\n\t\t\t\tif (dtsCorrection <= -maxAudioFramesDrift * refSampleDuration) {\n\t\t\t\t\t// If we're overlapping by more than maxAudioFramesDrift number of frame, drop this sample\n\t\t\t\t\tLog.w(this.TAG, `Dropping 1 audio frame (originalDts: ${originalDts} ms ,curRefDts: ${curRefDts} ms)  due to dtsCorrection: ${dtsCorrection} ms overlap.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if (dtsCorrection >= maxAudioFramesDrift * refSampleDuration && this._fillAudioTimestampGap && !Browser.safari) {\n\t\t\t\t\t// Silent frame generation, if large timestamp gap detected && config.fixAudioTimestampGap\n\t\t\t\t\tneedFillSilentFrames = true;\n\t\t\t\t\t// We need to insert silent frames to fill timestamp gap\n\t\t\t\t\tlet frameCount = Math.floor(dtsCorrection / refSampleDuration);\n\t\t\t\t\tLog.w(this.TAG, 'Large audio timestamp gap detected, may cause AV sync to drift. ' +\n\t\t\t\t\t\t'Silent frames will be generated to avoid unsync.\\n' +\n\t\t\t\t\t\t`originalDts: ${originalDts} ms, curRefDts: ${curRefDts} ms, ` +\n\t\t\t\t\t\t`dtsCorrection: ${Math.round(dtsCorrection)} ms, generate: ${frameCount} frames`);\n\n\n\t\t\t\t\tdts = Math.floor(curRefDts);\n\t\t\t\t\tsampleDuration = Math.floor(curRefDts + refSampleDuration) - dts;\n\n\t\t\t\t\tlet silentUnit = AAC.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);\n\t\t\t\t\tif (silentUnit == null) {\n\t\t\t\t\t\tLog.w(this.TAG, 'Unable to generate silent frame for ' +\n\t\t\t\t\t\t\t`${this._audioMeta.originalCodec} with ${this._audioMeta.channelCount} channels, repeat last frame`);\n\t\t\t\t\t\t// Repeat last frame\n\t\t\t\t\t\tsilentUnit = unit;\n\t\t\t\t\t}\n\t\t\t\t\tsilentFrames = [];\n\n\t\t\t\t\tfor (let j = 0; j < frameCount; j++) {\n\t\t\t\t\t\tcurRefDts = curRefDts + refSampleDuration;\n\t\t\t\t\t\tlet intDts = Math.floor(curRefDts);  // change to integer\n\t\t\t\t\t\tlet intDuration = Math.floor(curRefDts + refSampleDuration) - intDts;\n\t\t\t\t\t\tlet frame = {\n\t\t\t\t\t\t\tdts: intDts,\n\t\t\t\t\t\t\tpts: intDts,\n\t\t\t\t\t\t\tcts: 0,\n\t\t\t\t\t\t\tunit: silentUnit,\n\t\t\t\t\t\t\tsize: silentUnit.byteLength,\n\t\t\t\t\t\t\tduration: intDuration,  // wait for next sample\n\t\t\t\t\t\t\toriginalDts: originalDts,\n\t\t\t\t\t\t\tflags: {\n\t\t\t\t\t\t\t\tisLeading: 0,\n\t\t\t\t\t\t\t\tdependsOn: 1,\n\t\t\t\t\t\t\t\tisDependedOn: 0,\n\t\t\t\t\t\t\t\thasRedundancy: 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsilentFrames.push(frame);\n\t\t\t\t\t\tmdatBytes += frame.size;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._audioNextDts = curRefDts + refSampleDuration;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdts = Math.floor(curRefDts);\n\t\t\t\t\tsampleDuration = Math.floor(curRefDts + refSampleDuration) - dts;\n\t\t\t\t\tthis._audioNextDts = curRefDts + refSampleDuration;\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// keep the original dts calculate algorithm for mp3\n\t\t\t\tdts = originalDts - dtsCorrection;\n\n\n\t\t\t\tif (i !== samples.length - 1) {\n\t\t\t\t\tlet nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;\n\t\t\t\t\tsampleDuration = nextDts - dts;\n\t\t\t\t} else {  // the last sample\n\t\t\t\t\tif (lastSample != null) {  // use stashed sample's dts to calculate sample duration\n\t\t\t\t\t\tlet nextDts = lastSample.dts - this._dtsBase - dtsCorrection;\n\t\t\t\t\t\tsampleDuration = nextDts - dts;\n\t\t\t\t\t} else if (mp4Samples.length >= 1) {  // use second last sample duration\n\t\t\t\t\t\tsampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n\t\t\t\t\t} else {  // the only one sample, use reference sample duration\n\t\t\t\t\t\tsampleDuration = Math.floor(refSampleDuration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._audioNextDts = dts + sampleDuration;\n\t\t\t}\n\n\t\t\tif (firstDts === -1) {\n\t\t\t\tfirstDts = dts;\n\t\t\t}\n\t\t\tmp4Samples.push({\n\t\t\t\tdts: dts,\n\t\t\t\tpts: dts,\n\t\t\t\tcts: 0,\n\t\t\t\tunit: sample.unit,\n\t\t\t\tsize: sample.unit.byteLength,\n\t\t\t\tduration: sampleDuration,\n\t\t\t\toriginalDts: originalDts,\n\t\t\t\tflags: {\n\t\t\t\t\tisLeading: 0,\n\t\t\t\t\tdependsOn: 1,\n\t\t\t\t\tisDependedOn: 0,\n\t\t\t\t\thasRedundancy: 0\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (needFillSilentFrames) {\n\t\t\t\t// Silent frames should be inserted after wrong-duration frame\n\t\t\t\tmp4Samples.push.apply(mp4Samples, silentFrames);\n\t\t\t}\n\t\t}\n\n\t\tif (mp4Samples.length === 0) {\n\t\t\t//no samples need to remux\n\t\t\ttrack.samples = [];\n\t\t\ttrack.length = 0;\n\t\t\tLog.w(this.TAG, \"no mp4Samples = 0\");\n\t\t\treturn;\n\t\t}\n\n\t\t// allocate mdatbox\n\t\tif (mpegRawTrack) {\n\t\t\t// allocate for raw mpeg buffer\n\t\t\tmdatbox = new Uint8Array(mdatBytes);\n\t\t} else {\n\t\t\t// allocate for fmp4 mdat box\n\t\t\tmdatbox = new Uint8Array(mdatBytes);\n\t\t\t// size field\n\t\t\tmdatbox[0] = (mdatBytes >>> 24) & 0xFF;\n\t\t\tmdatbox[1] = (mdatBytes >>> 16) & 0xFF;\n\t\t\tmdatbox[2] = (mdatBytes >>> 8) & 0xFF;\n\t\t\tmdatbox[3] = (mdatBytes) & 0xFF;\n\t\t\t// type field (fourCC)\n\t\t\tmdatbox.set(MP4.types.mdat, 4);\n\t\t}\n\n\t\t// Write samples into mdatbox\n\t\tfor (let i = 0; i < mp4Samples.length; i++) {\n\t\t\tlet unit = mp4Samples[i].unit;\n\t\t\tmdatbox.set(unit, offset);\n\t\t\toffset += unit.byteLength;\n\t\t}\n\n\t\tlet latest = mp4Samples[mp4Samples.length - 1];\n\t\tlastDts = latest.dts + latest.duration;\n\t\t//this._audioNextDts = lastDts;\n\n\t\t// fill media segment info & add to info list\n\t\tlet info = new MediaSegmentInfo();\n\t\tinfo.beginDts = firstDts;\n\t\tinfo.endDts = lastDts;\n\t\tinfo.beginPts = firstDts;\n\t\tinfo.endPts = lastDts;\n\t\tinfo.originalBeginDts = mp4Samples[0].originalDts;\n\t\tinfo.originalEndDts = latest.originalDts + latest.duration;\n\t\tinfo.firstSample = new SampleInfo(mp4Samples[0].dts,\n\t\t\tmp4Samples[0].pts,\n\t\t\tmp4Samples[0].duration,\n\t\t\tmp4Samples[0].originalDts,\n\t\t\tfalse);\n\t\tinfo.lastSample = new SampleInfo(latest.dts,\n\t\t\tlatest.pts,\n\t\t\tlatest.duration,\n\t\t\tlatest.originalDts,\n\t\t\tfalse);\n\t\tif (!this._isLive) {\n\t\t\tthis._audioSegmentInfoList.append(info);\n\t\t}\n\n\t\ttrack.samples = mp4Samples;\n\t\ttrack.sequenceNumber++;\n\n\t\tlet moofbox;\n\n\t\tif (mpegRawTrack) {\n\t\t\t// Generate empty buffer, because useless for raw mpeg\n\t\t\tmoofbox = new Uint8Array(0);\n\t\t} else {\n\t\t\t// Generate moof for fmp4 segment\n\t\t\tmoofbox = MP4.moof(track, firstDts);\n\t\t}\n\n\t\ttrack.samples = [];\n\t\ttrack.length = 0;\n\n\t\tlet segment = {\n\t\t\ttype: 'audio',\n\t\t\tdata: this._mergeBoxes(moofbox, mdatbox).buffer,\n\t\t\tsampleCount: mp4Samples.length,\n\t\t\tinfo: info\n\t\t};\n\n\t\tif (mpegRawTrack && firstSegmentAfterSeek) {\n\t\t\t// For MPEG audio stream in MSE, if seeking occurred, before appending new buffer\n\t\t\t// We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.\n\t\t\tsegment.timestampOffset = firstDts;\n\t\t}\n\n\t\tLog.i(this.TAG, \"send onMediaSegment audio\");\n\t\tthis._onMediaSegment('audio', segment);\n\t}\n\n\t_remuxVideo(videoTrack, force) {\n\t\tLog.i(this.TAG, \"_remuxVideo\");\n\t\tif (this._videoMeta == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet track = videoTrack;\n\t\tlet samples = track.samples;\n\t\tlet dtsCorrection = undefined;\n\t\tlet firstDts = -1, lastDts = -1;\n\t\tlet firstPts = -1, lastPts = -1;\n\n\t\tif (!samples || samples.length === 0) {\n\t\t\tLog.w(this.TAG, \"no samples\");\n\t\t\treturn;\n\t\t}\n\t\tif (samples.length === 1 && !force) {\n\t\t\t// If [sample count in current batch] === 1 && (force != true)\n\t\t\t// Ignore and keep in demuxer's queue\n\t\t\tLog.w(this.TAG, \"no sampes = 1\");\n\t\t\treturn;\n\t\t}  // else if (force === true) do remux\n\n\t\tlet offset = 8;\n\t\tlet mdatbox = null;\n\t\tlet mdatBytes = 8 + videoTrack.length;\n\n\n\t\tlet lastSample = null;\n\n\t\t// Pop the lastSample and waiting for stash\n\t\tif (samples.length > 1) {\n\t\t\tlastSample = samples.pop();\n\t\t\tmdatBytes -= lastSample.length;\n\t\t}\n\n\t\t// Insert [stashed lastSample in the previous batch] to the front\n\t\tif (this._videoStashedLastSample != null) {\n\t\t\tlet sample = this._videoStashedLastSample;\n\t\t\tthis._videoStashedLastSample = null;\n\t\t\tsamples.unshift(sample);\n\t\t\tmdatBytes += sample.length;\n\t\t}\n\n\t\t// Stash the lastSample of current batch, waiting for next batch\n\t\tif (lastSample != null) {\n\t\t\tthis._videoStashedLastSample = lastSample;\n\t\t}\n\n\n\t\tlet firstSampleOriginalDts = samples[0].dts - this._dtsBase;\n\n\t\t// calculate dtsCorrection\n\t\tif (this._videoNextDts) {\n\t\t\tdtsCorrection = firstSampleOriginalDts - this._videoNextDts;\n\t\t} else {  // this._videoNextDts == undefined\n\t\t\tif (this._videoSegmentInfoList.isEmpty()) {\n\t\t\t\tdtsCorrection = 0;\n\t\t\t} else {\n\t\t\t\tlet lastSample = this._videoSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);\n\t\t\t\tif (lastSample != null) {\n\t\t\t\t\tlet distance = (firstSampleOriginalDts - (lastSample.originalDts + lastSample.duration));\n\t\t\t\t\tif (distance <= 3) {\n\t\t\t\t\t\tdistance = 0;\n\t\t\t\t\t}\n\t\t\t\t\tlet expectedDts = lastSample.dts + lastSample.duration + distance;\n\t\t\t\t\tdtsCorrection = firstSampleOriginalDts - expectedDts;\n\t\t\t\t} else { // lastSample == null, cannot found\n\t\t\t\t\tdtsCorrection = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet info = new MediaSegmentInfo();\n\t\tlet mp4Samples = [];\n\n\t\t// Correct dts for each sample, and calculate sample duration. Then output to mp4Samples\n\t\tfor (let i = 0; i < samples.length; i++) {\n\t\t\tlet sample = samples[i];\n\t\t\tlet originalDts = sample.dts - this._dtsBase;\n\t\t\tlet isKeyframe = sample.isKeyframe;\n\t\t\tlet dts = originalDts - dtsCorrection;\n\t\t\tlet cts = sample.cts;\n\t\t\tlet pts = dts + cts;\n\n\t\t\tif (firstDts === -1) {\n\t\t\t\tfirstDts = dts;\n\t\t\t\tfirstPts = pts;\n\t\t\t}\n\n\t\t\tlet sampleDuration = 0;\n\n\t\t\tif (i !== samples.length - 1) {\n\t\t\t\tlet nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;\n\t\t\t\tsampleDuration = nextDts - dts;\n\t\t\t} else {  // the last sample\n\t\t\t\tif (lastSample != null) {  // use stashed sample's dts to calculate sample duration\n\t\t\t\t\tlet nextDts = lastSample.dts - this._dtsBase - dtsCorrection;\n\t\t\t\t\tsampleDuration = nextDts - dts;\n\t\t\t\t} else if (mp4Samples.length >= 1) {  // use second last sample duration\n\t\t\t\t\tsampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n\t\t\t\t} else {  // the only one sample, use reference sample duration\n\t\t\t\t\tsampleDuration = Math.floor(this._videoMeta.refSampleDuration);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isKeyframe) {\n\t\t\t\tlet syncPoint = new SampleInfo(dts, pts, sampleDuration, sample.dts, true);\n\t\t\t\tsyncPoint.fileposition = sample.fileposition;\n\t\t\t\tinfo.appendSyncPoint(syncPoint);\n\t\t\t}\n\n\t\t\tmp4Samples.push({\n\t\t\t\tdts: dts,\n\t\t\t\tpts: pts,\n\t\t\t\tcts: cts,\n\t\t\t\tunits: sample.units,\n\t\t\t\tsize: sample.length,\n\t\t\t\tisKeyframe: isKeyframe,\n\t\t\t\tduration: sampleDuration,\n\t\t\t\toriginalDts: originalDts,\n\t\t\t\tflags: {\n\t\t\t\t\tisLeading: 0,\n\t\t\t\t\tdependsOn: isKeyframe ? 2 : 1,\n\t\t\t\t\tisDependedOn: isKeyframe ? 1 : 0,\n\t\t\t\t\thasRedundancy: 0,\n\t\t\t\t\tisNonSync: isKeyframe ? 0 : 1\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// allocate mdatbox\n\t\tmdatbox = new Uint8Array(mdatBytes);\n\t\tmdatbox[0] = (mdatBytes >>> 24) & 0xFF;\n\t\tmdatbox[1] = (mdatBytes >>> 16) & 0xFF;\n\t\tmdatbox[2] = (mdatBytes >>> 8) & 0xFF;\n\t\tmdatbox[3] = (mdatBytes) & 0xFF;\n\t\tmdatbox.set(MP4.types.mdat, 4);\n\n\t\t// Write samples into mdatbox\n\t\tfor (let i = 0; i < mp4Samples.length; i++) {\n\t\t\tlet units = mp4Samples[i].units;\n\t\t\twhile (units.length) {\n\t\t\t\tlet unit = units.shift();\n\t\t\t\tlet data = unit.data;\n\t\t\t\tmdatbox.set(data, offset);\n\t\t\t\toffset += data.byteLength;\n\t\t\t}\n\t\t}\n\n\t\tlet latest = mp4Samples[mp4Samples.length - 1];\n\t\tlastDts = latest.dts + latest.duration;\n\t\tlastPts = latest.pts + latest.duration;\n\t\tthis._videoNextDts = lastDts;\n\n\t\t// fill media segment info & add to info list\n\t\tinfo.beginDts = firstDts;\n\t\tinfo.endDts = lastDts;\n\t\tinfo.beginPts = firstPts;\n\t\tinfo.endPts = lastPts;\n\t\tinfo.originalBeginDts = mp4Samples[0].originalDts;\n\t\tinfo.originalEndDts = latest.originalDts + latest.duration;\n\t\tinfo.firstSample = new SampleInfo(mp4Samples[0].dts,\n\t\t\tmp4Samples[0].pts,\n\t\t\tmp4Samples[0].duration,\n\t\t\tmp4Samples[0].originalDts,\n\t\t\tmp4Samples[0].isKeyframe);\n\t\tinfo.lastSample = new SampleInfo(latest.dts,\n\t\t\tlatest.pts,\n\t\t\tlatest.duration,\n\t\t\tlatest.originalDts,\n\t\t\tlatest.isKeyframe);\n\t\tif (!this._isLive) {\n\t\t\tthis._videoSegmentInfoList.append(info);\n\t\t}\n\n\t\ttrack.samples = mp4Samples;\n\t\ttrack.sequenceNumber++;\n\n\t\t// workaround for chrome < 50: force first sample as a random access point\n\t\t// see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n\t\tif (this._forceFirstIDR) {\n\t\t\tlet flags = mp4Samples[0].flags;\n\t\t\tflags.dependsOn = 2;\n\t\t\tflags.isNonSync = 0;\n\t\t}\n\n\t\tlet moofbox = MP4.moof(track, firstDts);\n\t\ttrack.samples = [];\n\t\ttrack.length = 0;\n\n\t\tLog.i(this.TAG, \"send onMediaSegment video\");\n\t\tthis._onMediaSegment('video', {\n\t\t\ttype: 'video',\n\t\t\tdata: this._mergeBoxes(moofbox, mdatbox).buffer,\n\t\t\tsampleCount: mp4Samples.length,\n\t\t\tinfo: info\n\t\t});\n\t}\n\n\t_mergeBoxes(moof, mdat) {\n\t\tlet result = new Uint8Array(moof.byteLength + mdat.byteLength);\n\t\tresult.set(moof, 0);\n\t\tresult.set(mdat, moof.byteLength);\n\t\treturn result;\n\t}\n\n}\n\nexport default MP4Remuxer;\n","/*\n *\n * Copyright (C) 2023 itNOX. All Rights Reserved.\n *\n * @author Michael Balen <mb@itnox.de>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport ProtocolControlMessage from \"./ProtocolControlMessage\";\nimport RTMPMessage from \"./RTMPMessage\";\nimport Chunk from \"./Chunk\";\nimport Log from \"../utils/logger\";\n\nclass NetConnection{\n    TAG = \"NetConnection\";\n    WindowAcknowledgementSize;\n    MessageStreamID;\n    CHUNK_SIZE = 128;\n    BandWidth;\n    socket;\n\n    /**\n     *\n     * @param {Number} message_stream_id\n     * @param {RTMPMessageHandler} handler\n     */\n    constructor(message_stream_id, handler) {\n        this.MessageStreamID = message_stream_id;\n\n        Log.d(this.TAG, handler);\n\n        this.handler = handler;\n        this.socket = handler.socket;\n    }\n\n    /**\n     *\n     * @param {RTMPMessage} message\n     */\n    parseMessage(message){      // RTMPMessage\n        let data = message.getPayload();\n\n        switch(message.getMessageType()){\n        case 1:         // PCM Set Chunk Size\n            this.CHUNK_SIZE = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | (data[3]);\n            this.handler.setChunkSize(this.CHUNK_SIZE)\n            break;\n\n        case 2:         // PCM Abort Message\n        case 3:         // PCM Acknowledgement\n        case 5:         // PCM Window Acknowledgement Size\n            this.WindowAcknowledgementSize = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | (data[3]);\n            Log.i(this.TAG, \"WindowAcknowledgementSize: \" + this.WindowAcknowledgementSize);\n            break;\n\n        case 6:         // PCM Set Peer Bandwidth\n            this.BandWidth = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | (data[3]);\n            Log.i(this.TAG, \"SetPeerBandwidth: \" + this.BandWidth);\n\n            // send Window Ack Size\n            let msg = new ProtocolControlMessage(0x05, this.WindowAcknowledgementSize);\n\n            let m2 = new RTMPMessage(msg.getBytes());\n            m2.setMessageType(0x05)     // WinACKSize\n\n            const chunk = new Chunk(m2);\n            chunk.setChunkStreamID(2);  // Control Channel\n\n            Log.i(this.TAG, \"send WindowAcksize\");\n            this.socket.send(chunk.getBytes());\n\n            break;\n\n        default:\n            break;\n        }\n    }\n}\n\nexport default NetConnection;\n"],"names":["Log","static","INFO","level","tag","txt","tmpLevel","LEVEL","loglevels","OFF","callstack","_getStackTrace","shift","color","TRACE","DEBUG","WARN","ERROR","CRITICAL","_print","WITH_STACKTRACE","console","group","groupCollapsed","i","length","log","groupEnd","dont","exist","e","stack","lines","split","push","msg","_output","_concatArrayBuffers","bufs","result","Uint8Array","reduce","totalSize","buf","byteLength","offset","set","_stringToByteArray","str","bytes","char","charCodeAt","_numberToByteArray","num","buffer","ArrayBuffer","DataView","setFloat64","slice","call","_byteArrayToNumber","ba","view","forEach","b","setUint8","getFloat64","_byteArrayToString","ret","String","fromCharCode","defaultConfig","enableStashBuffer","stashInitialSize","undefined","isLive","autoCleanupSourceBuffer","autoCleanupMaxBackwardDuration","autoCleanupMinBackwardDuration","statisticsInfoReportInterval","fixAudioTimestampGap","headers","TransmuxingEvents","DemuxErrors","TAG","messageType","messageLength","timestamp","extendedTimestamp","message_stream_id","payload","constructor","this","setMessageLength","addPayload","clearPayload","getBytes","header","setMessageType","message_type","getMessageType","getMessageStreamID","setMessageStreamID","messageStreamID","getPayloadlength","getTimestamp","setMessageTimestamp","setExtendedTimestamp","yes","getExtendedTimestamp","setTimestampDelta","timestamp_delta","data","bytesMissing","getPayload","message_length","getMessageLength","isComplete","chunk_stream_id","CHUNK_SIZE","message","p","fmt","_getHeaderBytes","basic_header","setChunkSize","size","setChunkStreamID","setTimestamp","UserControlMessage","event_type","event_data1","event_data2","getEventMessage","o","events","setType","setEventData","event_data","ProtocolControlMessage","pcm_type","setPayload","pcm_types","RuntimeException","_message","name","toString","IllegalStateException","super","InvalidArgumentException","mimeType","duration","hasAudio","hasVideo","audioCodec","videoCodec","audioDataRate","videoDataRate","audioSampleRate","audioChannelCount","width","height","fps","profile","refFrames","chromaFormat","sarNum","sarDen","metadata","segments","segmentCount","hasKeyframesIndex","keyframesIndex","audioInfoComplete","videoInfoComplete","isSeekable","getNearestKeyframe","milliseconds","table","keyframeIdx","_search","times","index","fileposition","filepositions","list","value","idx","last","mid","lbound","ubound","Math","floor","checkContinuation","uint8array","start","checkLength","array","decodeUTF8","out","input","ucs4","join","le","setInt16","Int16Array","AMF","parseValue","parseString","isObjectEnd","objectEnd","parseObject","getUint16","getUint32","v","getInt16","Date","type","getUint8","amfstr","terminal","amfobj","amfvar","parseVariable","strictArrayLength","val","date","parseDate","amfLongStr","SPSParser","src","src_length","dst","dst_idx","rbsp","_ebsp2rbsp","gb","_buffer","_buffer_index","_total_bytes","_total_bits","_current_word","_current_word_bits_left","destroy","_fillCurrentWord","buffer_bytes_left","bytes_read","min","word","subarray","readBits","bits","bits_need_left","bits_read_next","result2","readBool","readByte","_skipLeadingZero","zero_count","readUEG","leading_zeros","readSEG","profile_idc","level_idc","profile_string","getProfileString","level_string","getLevelString","chroma_format_idc","chroma_format","bit_depth","scaling_list_count","_skipScalingList","pic_order_cnt_type","num_ref_frames_in_pic_order_cnt_cycle","ref_frames","pic_width_in_mbs_minus1","pic_height_in_map_units_minus1","frame_mbs_only_flag","frame_crop_left_offset","frame_crop_right_offset","frame_crop_top_offset","frame_crop_bottom_offset","sar_width","sar_height","fps_fixed","fps_num","fps_den","aspect_ratio_idc","num_units_in_tick","time_scale","sarScale","crop_unit_x","crop_unit_y","codec_width","codec_height","present_width","ceil","chroma_format_string","getChromaFormatString","frame_rate","fixed","sar_ratio","codec_size","present_size","count","last_scale","next_scale","delta_scale","toFixed","chroma","MP4","types","avc1","avcC","btrt","dinf","dref","esds","ftyp","hdlr","mdat","mdhd","mdia","mfhd","minf","moof","moov","mp4a","mvex","mvhd","sdtp","stbl","stco","stsc","stsd","stsz","stts","tfdt","tfhd","traf","trak","trun","trex","tkhd","vmhd","smhd","hasOwnProperty","constants","FTYP","STSD_PREFIX","STTS","STSC","STCO","STSZ","HDLR_VIDEO","HDLR_AUDIO","DREF","SMHD","VMHD","datas","Array","prototype","arguments","arrayCount","meta","box","timescale","trackId","id","presentWidth","presentHeight","xmhd","codec","mp3","channelCount","sampleRate","config","configSize","concat","avcc","codecWidth","codecHeight","track","baseMediaDecodeTime","sequenceNumber","samples","sampleCount","flags","isLeading","dependsOn","isDependedOn","dataSize","cts","hasRedundancy","isNonSync","init","SampleInfo","dts","pts","originalDts","isSync","isSyncPoint","MediaSegmentInfo","beginDts","endDts","beginPts","endPts","originalBeginDts","originalEndDts","syncPoints","firstSample","lastSample","appendSyncPoint","sampleInfo","MediaSegmentInfoList","_type","_list","_lastAppendLocation","isEmpty","clear","_searchNearestSegmentBefore","_searchNearestSegmentAfter","append","mediaSegmentInfo","msi","lastAppendIdx","insertIdx","splice","getLastSegmentBefore","getLastSampleBefore","segment","getLastSyncPointBefore","segmentIdx","Browser","ua","self","navigator","userAgent","toLowerCase","match","exec","indexOf","platform_match","matched","browser","version","majorVersion","platform","versionArray","major","parseInt","string","minor","build","chrome","opr","safari","webkit","rv","iemobile","msie","edge","msedge","opera","android","key","Object","assign","detect","params","parseAMF0","from","obj","var_type","len","_parseAMF0Object","o2","keylen","keyName","param","keylength","getCommand","getTransactionId","getCommandObject","getAdditionalInfo","port","host","message_handler","wss_manager","wss","open","callback","WebSocket","binaryType","onopen","onclose","postMessage","onerror","registerMessageHandler","cb","onmessage","getSocket","getHost","close","addEventListener","cmd","success","handshake","state","onHandshakeDone","c1","c2","socket","processServerInput","do","send","_generateC1","random","time","round","now","_generateC2","s1","_parseS0","_parseS1","_parseS2","_compare","ar1","ar2","netconnections","trackedCommand","chunk_parser","chunkstreams","conn_worker","parseChunk","newdata","header_length","payload_length","csid","onMessage","consumed","media_handler","_config","_onError","_onMediaInfo","_onMetaDataArrived","_onScriptDataArrived","_onDataAvailable","_onTrackMetadata","_dispatch","_hasAudio","_hasVideo","_hasAudioFlagOverrided","_hasVideoFlagOverrided","_audioInitialMetadataDispatched","_videoInitialMetadataDispatched","_mediaInfo","_metadata","_audioMetadata","_videoMetadata","_naluLengthSize","_timestampBase","_timescale","_duration","_durationOverrided","_referenceFrameRate","_flvSoundRateTable","_mpegSamplingRates","_mpegAudioV10SampleRateTable","_mpegAudioV20SampleRateTable","_mpegAudioV25SampleRateTable","_mpegAudioL1BitRateTable","_mpegAudioL2BitRateTable","_mpegAudioL3BitRateTable","_videoTrack","_audioTrack","_littleEndian","bytePos","_transmuxer","_emitter","ListenerList","event","listener","addListener","removeListener","entry","removeAllListeners","emit","_currentSegmentIndex","_ioctl","_pendingSeekTime","_pendingResolveSeekPoint","_statisticsReporter","_remuxer","_isLive","_dtsBase","_dtsBaseInited","_audioDtsBase","Infinity","_videoDtsBase","_audioNextDts","_videoNextDts","_audioStashedLastSample","_videoStashedLastSample","_audioMeta","_videoMeta","_audioSegmentInfoList","_videoSegmentInfoList","_onInitSegment","_onMediaSegment","_forceFirstIDR","_fillSilentAfterSeek","_mp3UseMpegAudio","_fillAudioTimestampGap","onInitSegment","onMediaSegment","insertDiscontinuity","seek","remux","audioTrack","videoTrack","_calculateDtsBase","_remuxVideo","_remuxAudio","_onTrackMetadataReceived","metabox","container","mediaDuration","flushStashedSamples","videoSample","audioSample","force","dtsCorrection","firstDts","lastDts","refSampleDuration","mpegRawTrack","firstSegmentAfterSeek","insertPrefixSilentFrame","mdatbox","mdatBytes","pop","sample","unshift","firstSampleOriginalDts","originalCodec","distance","firstSampleDts","videoSegment","silentUnit","silentFrameDuration","unit","mp4Samples","needFillSilentFrames","silentFrames","sampleDuration","curRefDts","maxAudioFramesDrift","frameCount","j","intDts","intDuration","frame","apply","latest","moofbox","info","_mergeBoxes","timestampOffset","firstPts","lastPts","isKeyframe","syncPoint","units","_onRemuxerInitSegmentArrival","bind","_onRemuxerMediaSegmentArrival","_mediaDataSource","_disableStatisticsReporter","on","off","stop","_internalAbort","_searchSegmentIndexContains","timestampBase","mediaInfo","setPrototypeOf","segmentInfo","_reportSegmentMediaInfo","initSegment","mediaSegment","seekpoint","is","ms","onTrackMetadata","onMediaInfo","onMetaDataArrived","onScriptDataArrived","onError","onDataAvailable","base","overridedDuration","overridedHasAudio","overridedHasVideo","resetMediaInfo","_isInitialMetadataDispatched","handleMediaMessage","tagType","_parseAudioData","_parseVideoData","_parseScriptData","scriptData","onMetaData","audiodatarate","videodatarate","framerate","keyframes","_parseKeyframesIndex","keys","tagTimestamp","soundSpec","soundFormat","soundRate","soundRateIndex","soundType","aacData","_parseAACAudioData","packetType","misc","samplingRate","mi","aacSample","_parseMP3AudioData","bitRate","mp3Sample","_parseAACAudioSpecificConfig","audioObjectType","originalAudioObjectType","samplingIndex","extensionSamplingIndex","samplingFrequence","channelConfig","requestHeader","ver","layer","bitrate_index","sampling_freq_index","channel_count","sample_rate","bit_rate","object_type","tagPosition","spec","frameType","codecId","_parseAVCVideoPacket","_parseAVCDecoderConfigurationRecord","_parseAVCVideoData","avcProfile","spsCount","sps","bitDepth","sarRatio","frameRate","codecArray","codecString","h","ppsCount","lengthSize","keyframe","naluSize","unitType","avcSample","mediainfo","parseMessage","_handleUserControlMessage","code","createStream","connect","connectionParams","command","_sendCommand","options","play","streamName","pause","enable","receiveVideo","receiveAudio","chunk","WindowAcknowledgementSize","MessageStreamID","BandWidth","handler","m2","_getNextMessageStreamID","_getNextChunkStreamID","application","appName"],"sourceRoot":""}